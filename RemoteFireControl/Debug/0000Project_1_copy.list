
0000Project_1_copy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004364  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004614  08004614  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800461c  0800461c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000244  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000250  20000250  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219c  00000000  00000000  0002f221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  000313c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c40  00000000  00000000  000320c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021df9  00000000  00000000  00032d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104e8  00000000  00000000  00054af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb166  00000000  00000000  00064fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130147  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035e0  00000000  00000000  00130198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044d4 	.word	0x080044d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080044d4 	.word	0x080044d4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ESP_Init>:
extern bool receive_buffer_full_flag;
extern uint8_t rcvd_byte;


void ESP_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0


	/***********RESETTING**************************************************/
		Uart_transmit_string((uint8_t*)"AT+RST\r\n",2);
 80004e0:	2102      	movs	r1, #2
 80004e2:	4832      	ldr	r0, [pc, #200]	; (80005ac <ESP_Init+0xd0>)
 80004e4:	f000 f9e2 	bl	80008ac <Uart_transmit_string>
	    HAL_Delay(3000); //Wait 2 second to reset the esp
 80004e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004ec:	f000 ffde 	bl	80014ac <HAL_Delay>
	    //while(!ringBuffer_contains_substring(&rx_buffer,"OK"));
	    Clear_Buffer(&rx_buffer);
 80004f0:	482f      	ldr	r0, [pc, #188]	; (80005b0 <ESP_Init+0xd4>)
 80004f2:	f000 fa0d 	bl	8000910 <Clear_Buffer>


	/**************************CHECK it is run or not**************************************************/
	    Uart_transmit_string((uint8_t*)"AT\r\n",2);
 80004f6:	2102      	movs	r1, #2
 80004f8:	482e      	ldr	r0, [pc, #184]	; (80005b4 <ESP_Init+0xd8>)
 80004fa:	f000 f9d7 	bl	80008ac <Uart_transmit_string>
	    HAL_Delay(500);
 80004fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000502:	f000 ffd3 	bl	80014ac <HAL_Delay>
	    while(!ringBuffer_contains_substring(&rx_buffer,"OK"));
 8000506:	bf00      	nop
 8000508:	492b      	ldr	r1, [pc, #172]	; (80005b8 <ESP_Init+0xdc>)
 800050a:	4829      	ldr	r0, [pc, #164]	; (80005b0 <ESP_Init+0xd4>)
 800050c:	f000 fa46 	bl	800099c <ringBuffer_contains_substring>
 8000510:	4603      	mov	r3, r0
 8000512:	f083 0301 	eor.w	r3, r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1f5      	bne.n	8000508 <ESP_Init+0x2c>
	    Clear_Buffer(&rx_buffer);
 800051c:	4824      	ldr	r0, [pc, #144]	; (80005b0 <ESP_Init+0xd4>)
 800051e:	f000 f9f7 	bl	8000910 <Clear_Buffer>



	/**************************Set ESP as client mode**************************************************/
	    Uart_transmit_string((uint8_t*)"AT+CWMODE=3\r\n",2);
 8000522:	2102      	movs	r1, #2
 8000524:	4825      	ldr	r0, [pc, #148]	; (80005bc <ESP_Init+0xe0>)
 8000526:	f000 f9c1 	bl	80008ac <Uart_transmit_string>
	    while(!ringBuffer_contains_substring(&rx_buffer,"OK"));
 800052a:	bf00      	nop
 800052c:	4922      	ldr	r1, [pc, #136]	; (80005b8 <ESP_Init+0xdc>)
 800052e:	4820      	ldr	r0, [pc, #128]	; (80005b0 <ESP_Init+0xd4>)
 8000530:	f000 fa34 	bl	800099c <ringBuffer_contains_substring>
 8000534:	4603      	mov	r3, r0
 8000536:	f083 0301 	eor.w	r3, r3, #1
 800053a:	b2db      	uxtb	r3, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1f5      	bne.n	800052c <ESP_Init+0x50>
	    Clear_Buffer(&rx_buffer);
 8000540:	481b      	ldr	r0, [pc, #108]	; (80005b0 <ESP_Init+0xd4>)
 8000542:	f000 f9e5 	bl	8000910 <Clear_Buffer>


	/**************************Enable Multiple Connection**************************************************/

	    Uart_transmit_string((uint8_t*)"AT+CIPMUX=1\r\n",2);
 8000546:	2102      	movs	r1, #2
 8000548:	481d      	ldr	r0, [pc, #116]	; (80005c0 <ESP_Init+0xe4>)
 800054a:	f000 f9af 	bl	80008ac <Uart_transmit_string>
	    HAL_Delay(500);
 800054e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000552:	f000 ffab 	bl	80014ac <HAL_Delay>
	    while(!ringBuffer_contains_substring(&rx_buffer,"OK"));
 8000556:	bf00      	nop
 8000558:	4917      	ldr	r1, [pc, #92]	; (80005b8 <ESP_Init+0xdc>)
 800055a:	4815      	ldr	r0, [pc, #84]	; (80005b0 <ESP_Init+0xd4>)
 800055c:	f000 fa1e 	bl	800099c <ringBuffer_contains_substring>
 8000560:	4603      	mov	r3, r0
 8000562:	f083 0301 	eor.w	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1f5      	bne.n	8000558 <ESP_Init+0x7c>
	    Clear_Buffer(&rx_buffer); // clear garbage value of received from esp
 800056c:	4810      	ldr	r0, [pc, #64]	; (80005b0 <ESP_Init+0xd4>)
 800056e:	f000 f9cf 	bl	8000910 <Clear_Buffer>



	/**************************Enable Multiple Connection**************************************************/
	    do{
	    	Clear_Buffer(&rx_buffer);
 8000572:	480f      	ldr	r0, [pc, #60]	; (80005b0 <ESP_Init+0xd4>)
 8000574:	f000 f9cc 	bl	8000910 <Clear_Buffer>
	        Uart_transmit_string((uint8_t*)"AT+CIPSTART=1,\"TCP\",\"192.168.79.168\",80\r\n",2);
 8000578:	2102      	movs	r1, #2
 800057a:	4812      	ldr	r0, [pc, #72]	; (80005c4 <ESP_Init+0xe8>)
 800057c:	f000 f996 	bl	80008ac <Uart_transmit_string>
	        HAL_Delay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000584:	f000 ff92 	bl	80014ac <HAL_Delay>
	    }
	    while(!ringBuffer_contains_substring(&rx_buffer,"OK"));
 8000588:	490b      	ldr	r1, [pc, #44]	; (80005b8 <ESP_Init+0xdc>)
 800058a:	4809      	ldr	r0, [pc, #36]	; (80005b0 <ESP_Init+0xd4>)
 800058c:	f000 fa06 	bl	800099c <ringBuffer_contains_substring>
 8000590:	4603      	mov	r3, r0
 8000592:	f083 0301 	eor.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1ea      	bne.n	8000572 <ESP_Init+0x96>
	    Clear_Buffer(&rx_buffer); // clear garbage value of received from esp
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <ESP_Init+0xd4>)
 800059e:	f000 f9b7 	bl	8000910 <Clear_Buffer>

	    Clear_AllBuffer(&rx_buffer);
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <ESP_Init+0xd4>)
 80005a4:	f000 f9d0 	bl	8000948 <Clear_AllBuffer>



}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	080044ec 	.word	0x080044ec
 80005b0:	20000028 	.word	0x20000028
 80005b4:	080044f8 	.word	0x080044f8
 80005b8:	08004500 	.word	0x08004500
 80005bc:	08004504 	.word	0x08004504
 80005c0:	08004514 	.word	0x08004514
 80005c4:	08004524 	.word	0x08004524

080005c8 <ESP_Server_Start>:


void ESP_Server_Start(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
    while(!ringBuffer_contains_substring(&rx_buffer,"+IPD"));
 80005cc:	bf00      	nop
 80005ce:	4973      	ldr	r1, [pc, #460]	; (800079c <ESP_Server_Start+0x1d4>)
 80005d0:	4873      	ldr	r0, [pc, #460]	; (80007a0 <ESP_Server_Start+0x1d8>)
 80005d2:	f000 f9e3 	bl	800099c <ringBuffer_contains_substring>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f083 0301 	eor.w	r3, r3, #1
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1f5      	bne.n	80005ce <ESP_Server_Start+0x6>
    delay_ms(100);
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f000 fca6 	bl	8000f34 <delay_ms>
    //while()



    //Uart_transmit(&rx_buffer);
    HAL_Delay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f000 ff5e 	bl	80014ac <HAL_Delay>
    if(ringBuffer_contains_substring(&rx_buffer,"end")) //pan right
 80005f0:	496c      	ldr	r1, [pc, #432]	; (80007a4 <ESP_Server_Start+0x1dc>)
 80005f2:	486b      	ldr	r0, [pc, #428]	; (80007a0 <ESP_Server_Start+0x1d8>)
 80005f4:	f000 f9d2 	bl	800099c <ringBuffer_contains_substring>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d006      	beq.n	800060c <ESP_Server_Start+0x44>
	{
		stepMotor1.shaftDirection = 1;
 80005fe:	4b6a      	ldr	r3, [pc, #424]	; (80007a8 <ESP_Server_Start+0x1e0>)
 8000600:	2201      	movs	r2, #1
 8000602:	801a      	strh	r2, [r3, #0]
		moveContinous(&stepMotor1);
 8000604:	4868      	ldr	r0, [pc, #416]	; (80007a8 <ESP_Server_Start+0x1e0>)
 8000606:	f000 fe23 	bl	8001250 <moveContinous>
 800060a:	e0c2      	b.n	8000792 <ESP_Server_Start+0x1ca>

	}

    else if(ringBuffer_contains_substring(&rx_buffer,"right")) //pan right
 800060c:	4967      	ldr	r1, [pc, #412]	; (80007ac <ESP_Server_Start+0x1e4>)
 800060e:	4864      	ldr	r0, [pc, #400]	; (80007a0 <ESP_Server_Start+0x1d8>)
 8000610:	f000 f9c4 	bl	800099c <ringBuffer_contains_substring>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d011      	beq.n	800063e <ESP_Server_Start+0x76>
    {
    	if(ringBuffer_contains_substring(&rx_buffer,"rightend"))
 800061a:	4965      	ldr	r1, [pc, #404]	; (80007b0 <ESP_Server_Start+0x1e8>)
 800061c:	4860      	ldr	r0, [pc, #384]	; (80007a0 <ESP_Server_Start+0x1d8>)
 800061e:	f000 f9bd 	bl	800099c <ringBuffer_contains_substring>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d003      	beq.n	8000630 <ESP_Server_Start+0x68>
    	{
    		stepMotor1.moveState = 0;
 8000628:	4b5f      	ldr	r3, [pc, #380]	; (80007a8 <ESP_Server_Start+0x1e0>)
 800062a:	2200      	movs	r2, #0
 800062c:	741a      	strb	r2, [r3, #16]
 800062e:	e0b0      	b.n	8000792 <ESP_Server_Start+0x1ca>
    	}else{
        	stepMotor1.shaftDirection = 1;
 8000630:	4b5d      	ldr	r3, [pc, #372]	; (80007a8 <ESP_Server_Start+0x1e0>)
 8000632:	2201      	movs	r2, #1
 8000634:	801a      	strh	r2, [r3, #0]
        	moveContinous(&stepMotor1);
 8000636:	485c      	ldr	r0, [pc, #368]	; (80007a8 <ESP_Server_Start+0x1e0>)
 8000638:	f000 fe0a 	bl	8001250 <moveContinous>
 800063c:	e0a9      	b.n	8000792 <ESP_Server_Start+0x1ca>
    	}



    }
    else if(ringBuffer_contains_substring(&rx_buffer,"left"))//pan left
 800063e:	495d      	ldr	r1, [pc, #372]	; (80007b4 <ESP_Server_Start+0x1ec>)
 8000640:	4857      	ldr	r0, [pc, #348]	; (80007a0 <ESP_Server_Start+0x1d8>)
 8000642:	f000 f9ab 	bl	800099c <ringBuffer_contains_substring>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d006      	beq.n	800065a <ESP_Server_Start+0x92>
    {

    	stepMotor1.shaftDirection = 0;
 800064c:	4b56      	ldr	r3, [pc, #344]	; (80007a8 <ESP_Server_Start+0x1e0>)
 800064e:	2200      	movs	r2, #0
 8000650:	801a      	strh	r2, [r3, #0]
    	moveContinous(&stepMotor1);
 8000652:	4855      	ldr	r0, [pc, #340]	; (80007a8 <ESP_Server_Start+0x1e0>)
 8000654:	f000 fdfc 	bl	8001250 <moveContinous>
 8000658:	e09b      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "down"))//tilt below
 800065a:	4957      	ldr	r1, [pc, #348]	; (80007b8 <ESP_Server_Start+0x1f0>)
 800065c:	4850      	ldr	r0, [pc, #320]	; (80007a0 <ESP_Server_Start+0x1d8>)
 800065e:	f000 f99d 	bl	800099c <ringBuffer_contains_substring>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d006      	beq.n	8000676 <ESP_Server_Start+0xae>
    {
    	stepMotor2.shaftDirection = 0;
 8000668:	4b54      	ldr	r3, [pc, #336]	; (80007bc <ESP_Server_Start+0x1f4>)
 800066a:	2200      	movs	r2, #0
 800066c:	801a      	strh	r2, [r3, #0]
    	moveContinous(&stepMotor2);
 800066e:	4853      	ldr	r0, [pc, #332]	; (80007bc <ESP_Server_Start+0x1f4>)
 8000670:	f000 fdee 	bl	8001250 <moveContinous>
 8000674:	e08d      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "up"))//tilt up
 8000676:	4952      	ldr	r1, [pc, #328]	; (80007c0 <ESP_Server_Start+0x1f8>)
 8000678:	4849      	ldr	r0, [pc, #292]	; (80007a0 <ESP_Server_Start+0x1d8>)
 800067a:	f000 f98f 	bl	800099c <ringBuffer_contains_substring>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <ESP_Server_Start+0xca>
    {
    	stepMotor2.shaftDirection = 1;
 8000684:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <ESP_Server_Start+0x1f4>)
 8000686:	2201      	movs	r2, #1
 8000688:	801a      	strh	r2, [r3, #0]
    	moveContinous(&stepMotor2);
 800068a:	484c      	ldr	r0, [pc, #304]	; (80007bc <ESP_Server_Start+0x1f4>)
 800068c:	f000 fde0 	bl	8001250 <moveContinous>
 8000690:	e07f      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "rightup"))//pan tilt right up
 8000692:	494c      	ldr	r1, [pc, #304]	; (80007c4 <ESP_Server_Start+0x1fc>)
 8000694:	4842      	ldr	r0, [pc, #264]	; (80007a0 <ESP_Server_Start+0x1d8>)
 8000696:	f000 f981 	bl	800099c <ringBuffer_contains_substring>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00a      	beq.n	80006b6 <ESP_Server_Start+0xee>
    {
    	stepMotor1.shaftDirection = 1;
 80006a0:	4b41      	ldr	r3, [pc, #260]	; (80007a8 <ESP_Server_Start+0x1e0>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	801a      	strh	r2, [r3, #0]
    	stepMotor2.shaftDirection = 1;
 80006a6:	4b45      	ldr	r3, [pc, #276]	; (80007bc <ESP_Server_Start+0x1f4>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	801a      	strh	r2, [r3, #0]
    	moveTwoMotorContinous(&stepMotor2, &stepMotor1);
 80006ac:	493e      	ldr	r1, [pc, #248]	; (80007a8 <ESP_Server_Start+0x1e0>)
 80006ae:	4843      	ldr	r0, [pc, #268]	; (80007bc <ESP_Server_Start+0x1f4>)
 80006b0:	f000 fdf9 	bl	80012a6 <moveTwoMotorContinous>
 80006b4:	e06d      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "leftup"))//pan tilt left up
 80006b6:	4944      	ldr	r1, [pc, #272]	; (80007c8 <ESP_Server_Start+0x200>)
 80006b8:	4839      	ldr	r0, [pc, #228]	; (80007a0 <ESP_Server_Start+0x1d8>)
 80006ba:	f000 f96f 	bl	800099c <ringBuffer_contains_substring>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00a      	beq.n	80006da <ESP_Server_Start+0x112>
    {
    	stepMotor1.shaftDirection = 0;
 80006c4:	4b38      	ldr	r3, [pc, #224]	; (80007a8 <ESP_Server_Start+0x1e0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	801a      	strh	r2, [r3, #0]
    	stepMotor2.shaftDirection = 1;
 80006ca:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <ESP_Server_Start+0x1f4>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	801a      	strh	r2, [r3, #0]
    	moveTwoMotorContinous(&stepMotor2, &stepMotor1);
 80006d0:	4935      	ldr	r1, [pc, #212]	; (80007a8 <ESP_Server_Start+0x1e0>)
 80006d2:	483a      	ldr	r0, [pc, #232]	; (80007bc <ESP_Server_Start+0x1f4>)
 80006d4:	f000 fde7 	bl	80012a6 <moveTwoMotorContinous>
 80006d8:	e05b      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "rightdown"))
 80006da:	493c      	ldr	r1, [pc, #240]	; (80007cc <ESP_Server_Start+0x204>)
 80006dc:	4830      	ldr	r0, [pc, #192]	; (80007a0 <ESP_Server_Start+0x1d8>)
 80006de:	f000 f95d 	bl	800099c <ringBuffer_contains_substring>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00a      	beq.n	80006fe <ESP_Server_Start+0x136>
    {
    	stepMotor1.shaftDirection = 1;
 80006e8:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <ESP_Server_Start+0x1e0>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	801a      	strh	r2, [r3, #0]
    	stepMotor2.shaftDirection = 0;
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <ESP_Server_Start+0x1f4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	801a      	strh	r2, [r3, #0]
    	moveTwoMotorContinous(&stepMotor2, &stepMotor1);
 80006f4:	492c      	ldr	r1, [pc, #176]	; (80007a8 <ESP_Server_Start+0x1e0>)
 80006f6:	4831      	ldr	r0, [pc, #196]	; (80007bc <ESP_Server_Start+0x1f4>)
 80006f8:	f000 fdd5 	bl	80012a6 <moveTwoMotorContinous>
 80006fc:	e049      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "leftdown"))
 80006fe:	4934      	ldr	r1, [pc, #208]	; (80007d0 <ESP_Server_Start+0x208>)
 8000700:	4827      	ldr	r0, [pc, #156]	; (80007a0 <ESP_Server_Start+0x1d8>)
 8000702:	f000 f94b 	bl	800099c <ringBuffer_contains_substring>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00a      	beq.n	8000722 <ESP_Server_Start+0x15a>
    {
    	stepMotor1.shaftDirection = 0;
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <ESP_Server_Start+0x1e0>)
 800070e:	2200      	movs	r2, #0
 8000710:	801a      	strh	r2, [r3, #0]
    	stepMotor2.shaftDirection = 0;
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <ESP_Server_Start+0x1f4>)
 8000714:	2200      	movs	r2, #0
 8000716:	801a      	strh	r2, [r3, #0]
    	moveTwoMotorContinous(&stepMotor2, &stepMotor1);
 8000718:	4923      	ldr	r1, [pc, #140]	; (80007a8 <ESP_Server_Start+0x1e0>)
 800071a:	4828      	ldr	r0, [pc, #160]	; (80007bc <ESP_Server_Start+0x1f4>)
 800071c:	f000 fdc3 	bl	80012a6 <moveTwoMotorContinous>
 8000720:	e037      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "autofire"))
 8000722:	492c      	ldr	r1, [pc, #176]	; (80007d4 <ESP_Server_Start+0x20c>)
 8000724:	481e      	ldr	r0, [pc, #120]	; (80007a0 <ESP_Server_Start+0x1d8>)
 8000726:	f000 f939 	bl	800099c <ringBuffer_contains_substring>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d130      	bne.n	8000792 <ESP_Server_Start+0x1ca>
    {
    	//StartDcMotor();
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "singlefire"))
 8000730:	4929      	ldr	r1, [pc, #164]	; (80007d8 <ESP_Server_Start+0x210>)
 8000732:	481b      	ldr	r0, [pc, #108]	; (80007a0 <ESP_Server_Start+0x1d8>)
 8000734:	f000 f932 	bl	800099c <ringBuffer_contains_substring>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d002      	beq.n	8000744 <ESP_Server_Start+0x17c>
    {
    	StartDcMotor();
 800073e:	f000 f9a7 	bl	8000a90 <StartDcMotor>
 8000742:	e026      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "high"))
 8000744:	4925      	ldr	r1, [pc, #148]	; (80007dc <ESP_Server_Start+0x214>)
 8000746:	4816      	ldr	r0, [pc, #88]	; (80007a0 <ESP_Server_Start+0x1d8>)
 8000748:	f000 f928 	bl	800099c <ringBuffer_contains_substring>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d003      	beq.n	800075a <ESP_Server_Start+0x192>
    {
    	SetDcMotorSpeed(99);
 8000752:	2063      	movs	r0, #99	; 0x63
 8000754:	f000 f97e 	bl	8000a54 <SetDcMotorSpeed>
 8000758:	e01b      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "medium"))
 800075a:	4921      	ldr	r1, [pc, #132]	; (80007e0 <ESP_Server_Start+0x218>)
 800075c:	4810      	ldr	r0, [pc, #64]	; (80007a0 <ESP_Server_Start+0x1d8>)
 800075e:	f000 f91d 	bl	800099c <ringBuffer_contains_substring>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <ESP_Server_Start+0x1a8>
    {
    	SetDcMotorSpeed(66);
 8000768:	2042      	movs	r0, #66	; 0x42
 800076a:	f000 f973 	bl	8000a54 <SetDcMotorSpeed>
 800076e:	e010      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else if(ringBuffer_contains_substring(&rx_buffer, "slow"))
 8000770:	491c      	ldr	r1, [pc, #112]	; (80007e4 <ESP_Server_Start+0x21c>)
 8000772:	480b      	ldr	r0, [pc, #44]	; (80007a0 <ESP_Server_Start+0x1d8>)
 8000774:	f000 f912 	bl	800099c <ringBuffer_contains_substring>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <ESP_Server_Start+0x1be>
    {
    	SetDcMotorSpeed(33);
 800077e:	2021      	movs	r0, #33	; 0x21
 8000780:	f000 f968 	bl	8000a54 <SetDcMotorSpeed>
 8000784:	e005      	b.n	8000792 <ESP_Server_Start+0x1ca>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078c:	4816      	ldr	r0, [pc, #88]	; (80007e8 <ESP_Server_Start+0x220>)
 800078e:	f001 f9fd 	bl	8001b8c <HAL_GPIO_WritePin>
    }

    Clear_Buffer(&rx_buffer);
 8000792:	4803      	ldr	r0, [pc, #12]	; (80007a0 <ESP_Server_Start+0x1d8>)
 8000794:	f000 f8bc 	bl	8000910 <Clear_Buffer>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	08004550 	.word	0x08004550
 80007a0:	20000028 	.word	0x20000028
 80007a4:	08004558 	.word	0x08004558
 80007a8:	20000210 	.word	0x20000210
 80007ac:	0800455c 	.word	0x0800455c
 80007b0:	08004564 	.word	0x08004564
 80007b4:	08004570 	.word	0x08004570
 80007b8:	08004578 	.word	0x08004578
 80007bc:	2000022c 	.word	0x2000022c
 80007c0:	08004580 	.word	0x08004580
 80007c4:	08004584 	.word	0x08004584
 80007c8:	0800458c 	.word	0x0800458c
 80007cc:	08004594 	.word	0x08004594
 80007d0:	080045a0 	.word	0x080045a0
 80007d4:	080045ac 	.word	0x080045ac
 80007d8:	080045b8 	.word	0x080045b8
 80007dc:	080045c4 	.word	0x080045c4
 80007e0:	080045cc 	.word	0x080045cc
 80007e4:	080045d4 	.word	0x080045d4
 80007e8:	40020c00 	.word	0x40020c00

080007ec <Buffer_Init>:
extern bool receive_buffer_full_flag;
ringBuffer rx_buffer;
ringBuffer tx_buffer;

void Buffer_Init()
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFERSIZE; ++i)
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	e00c      	b.n	8000812 <Buffer_Init+0x26>
	{
		rx_buffer.buffer[i] = 0;
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <Buffer_Init+0x58>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
		tx_buffer.buffer[i] = 0;
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <Buffer_Init+0x5c>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFERSIZE; ++i)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3301      	adds	r3, #1
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b63      	cmp	r3, #99	; 0x63
 8000816:	ddef      	ble.n	80007f8 <Buffer_Init+0xc>
	}
	rx_buffer.head = 0;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <Buffer_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	rx_buffer.tail = 0;
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <Buffer_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	tx_buffer.head = 0;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <Buffer_Init+0x5c>)
 800082a:	2200      	movs	r2, #0
 800082c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    tx_buffer.tail = 0;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <Buffer_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000028 	.word	0x20000028
 8000848:	20000090 	.word	0x20000090

0800084c <SendBuffer2>:


void SendBuffer2(uint8_t c)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	if(HAL_UART_Transmit(&huart2,&c,1, HAL_MAX_DELAY) != HAL_OK)
 8000856:	1df9      	adds	r1, r7, #7
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	2201      	movs	r2, #1
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <SendBuffer2+0x2c>)
 8000860:	f002 fd0e 	bl	8003280 <HAL_UART_Transmit>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SendBuffer2+0x22>
	{
		Error_Handler();
 800086a:	f000 fbb3 	bl	8000fd4 <Error_Handler>
	}
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000f8 	.word	0x200000f8

0800087c <SendBuffer1>:

void SendBuffer1(uint8_t c)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	if(HAL_UART_Transmit(&huart1,&c,1, HAL_MAX_DELAY) != HAL_OK)
 8000886:	1df9      	adds	r1, r7, #7
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	2201      	movs	r2, #1
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <SendBuffer1+0x2c>)
 8000890:	f002 fcf6 	bl	8003280 <HAL_UART_Transmit>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SendBuffer1+0x22>
	{
		Error_Handler();
 800089a:	f000 fb9b 	bl	8000fd4 <Error_Handler>
	}
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000013c 	.word	0x2000013c

080008ac <Uart_transmit_string>:
	}
	HAL_UART_Receive_IT(&huart2, &rcvd_byte,1);
}

void Uart_transmit_string(uint8_t *str,uint8_t huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
	if(huart == 1)
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d10b      	bne.n	80008d6 <Uart_transmit_string+0x2a>
	{
		while(*str)
 80008be:	e006      	b.n	80008ce <Uart_transmit_string+0x22>
		{
			SendBuffer1(*(str++));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ffd7 	bl	800087c <SendBuffer1>
		while(*str)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1f4      	bne.n	80008c0 <Uart_transmit_string+0x14>
		}
	}
	if(huart == 2)
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d10b      	bne.n	80008f4 <Uart_transmit_string+0x48>
	{
		while(*str)
 80008dc:	e006      	b.n	80008ec <Uart_transmit_string+0x40>
		{
			SendBuffer2(*(str++));
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ffb0 	bl	800084c <SendBuffer2>
		while(*str)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f4      	bne.n	80008de <Uart_transmit_string+0x32>
	}




	HAL_UART_Receive_IT(&huart2, &rcvd_byte,1);
 80008f4:	2201      	movs	r2, #1
 80008f6:	4904      	ldr	r1, [pc, #16]	; (8000908 <Uart_transmit_string+0x5c>)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <Uart_transmit_string+0x60>)
 80008fa:	f002 fd53 	bl	80033a4 <HAL_UART_Receive_IT>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000248 	.word	0x20000248
 800090c:	200000f8 	.word	0x200000f8

08000910 <Clear_Buffer>:

*/


void Clear_Buffer(ringBuffer *buf)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	buf->head = 0;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	buf->tail = 0;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	receive_complete_flag = 0;
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <Clear_Buffer+0x30>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
	receive_buffer_full_flag = 0;
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <Clear_Buffer+0x34>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	20000249 	.word	0x20000249
 8000944:	2000024a 	.word	0x2000024a

08000948 <Clear_AllBuffer>:

void Clear_AllBuffer(ringBuffer *buf)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i <100; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	e007      	b.n	8000966 <Clear_AllBuffer+0x1e>
	{
		buf->buffer[i] = '\0';
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <100; i++)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3301      	adds	r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2b63      	cmp	r3, #99	; 0x63
 800096a:	ddf4      	ble.n	8000956 <Clear_AllBuffer+0xe>
	}
	buf->head = 0;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	buf->tail = 0;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	receive_complete_flag = 0;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <Clear_AllBuffer+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
	receive_buffer_full_flag = 0;
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <Clear_AllBuffer+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	20000249 	.word	0x20000249
 8000998:	2000024a 	.word	0x2000024a

0800099c <ringBuffer_contains_substring>:
    	free(result);
     */
}

bool ringBuffer_contains_substring(ringBuffer *buffer, char *substring)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
    int substring_length = strlen(substring);
 80009a6:	6838      	ldr	r0, [r7, #0]
 80009a8:	f7ff fc0e 	bl	80001c8 <strlen>
 80009ac:	4603      	mov	r3, r0
 80009ae:	613b      	str	r3, [r7, #16]
    int search_start = buffer->tail;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	61fb      	str	r3, [r7, #28]

    while (search_start != buffer->head) {
 80009ba:	e03b      	b.n	8000a34 <ringBuffer_contains_substring+0x98>
        int match_length = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < substring_length; i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e01d      	b.n	8000a02 <ringBuffer_contains_substring+0x66>
            int buffer_index = (search_start + i) % BUFFERSIZE;
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a20      	ldr	r2, [pc, #128]	; (8000a50 <ringBuffer_contains_substring+0xb4>)
 80009ce:	fb82 1203 	smull	r1, r2, r2, r3
 80009d2:	1151      	asrs	r1, r2, #5
 80009d4:	17da      	asrs	r2, r3, #31
 80009d6:	1a8a      	subs	r2, r1, r2
 80009d8:	2164      	movs	r1, #100	; 0x64
 80009da:	fb01 f202 	mul.w	r2, r1, r2
 80009de:	1a9b      	subs	r3, r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
            if (buffer->buffer[buffer_index] == substring[i]) {
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	440b      	add	r3, r1
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d10a      	bne.n	8000a0c <ringBuffer_contains_substring+0x70>
                match_length++;
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	3301      	adds	r3, #1
 80009fa:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < substring_length; i++) {
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	3301      	adds	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	dbdd      	blt.n	80009c6 <ringBuffer_contains_substring+0x2a>
 8000a0a:	e000      	b.n	8000a0e <ringBuffer_contains_substring+0x72>
            } else {
                break;
 8000a0c:	bf00      	nop
            }
        }

        if (match_length == substring_length) {
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d101      	bne.n	8000a1a <ringBuffer_contains_substring+0x7e>
            return true;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e015      	b.n	8000a46 <ringBuffer_contains_substring+0xaa>
        }

        search_start = (search_start + 1) % BUFFERSIZE;
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a0c      	ldr	r2, [pc, #48]	; (8000a50 <ringBuffer_contains_substring+0xb4>)
 8000a20:	fb82 1203 	smull	r1, r2, r2, r3
 8000a24:	1151      	asrs	r1, r2, #5
 8000a26:	17da      	asrs	r2, r3, #31
 8000a28:	1a8a      	subs	r2, r1, r2
 8000a2a:	2164      	movs	r1, #100	; 0x64
 8000a2c:	fb01 f202 	mul.w	r2, r1, r2
 8000a30:	1a9b      	subs	r3, r3, r2
 8000a32:	61fb      	str	r3, [r7, #28]
    while (search_start != buffer->head) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d1bb      	bne.n	80009bc <ringBuffer_contains_substring+0x20>
    }

    return false;
 8000a44:	2300      	movs	r3, #0

}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	51eb851f 	.word	0x51eb851f

08000a54 <SetDcMotorSpeed>:
{
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
}

void SetDcMotorSpeed(uint16_t speed)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
	if(speed >  100)
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	2b64      	cmp	r3, #100	; 0x64
 8000a62:	d901      	bls.n	8000a68 <SetDcMotorSpeed+0x14>
	{
		speed = 100;
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	80fb      	strh	r3, [r7, #6]
	if(speed < 0)
	{
		speed = 0;
	}

	speed = speed * 500;
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	0152      	lsls	r2, r2, #5
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,speed);
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SetDcMotorSpeed+0x38>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	88fa      	ldrh	r2, [r7, #6]
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
	//__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,speed);
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	200001c8 	.word	0x200001c8

08000a90 <StartDcMotor>:

void StartDcMotor(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a94:	2100      	movs	r1, #0
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <StartDcMotor+0x1c>)
 8000a98:	f001 fe58 	bl	800274c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,25000);
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <StartDcMotor+0x1c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001c8 	.word	0x200001c8

08000ab0 <SysTick_Handler>:

extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim2;
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000ab4:	f000 fcda 	bl	800146c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000ab8:	f000 fe2d 	bl	8001716 <HAL_SYSTICK_IRQHandler>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <USART2_IRQHandler+0x10>)
 8000ac6:	f002 fd4f 	bl	8003568 <HAL_UART_IRQHandler>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000f8 	.word	0x200000f8

08000ad4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <USART1_IRQHandler+0x10>)
 8000ada:	f002 fd45 	bl	8003568 <HAL_UART_IRQHandler>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000013c 	.word	0x2000013c

08000ae8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM2_IRQHandler+0x10>)
 8000aee:	f001 fef5 	bl	80028dc <HAL_TIM_IRQHandler>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001c8 	.word	0x200001c8

08000afc <main>:
bool receive_complete_flag = 0;
bool receive_buffer_full_flag = 0;


int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	HAL_Init();
 8000b00:	f000 fc62 	bl	80013c8 <HAL_Init>
	SystemClock_Config();
 8000b04:	f000 f82c 	bl	8000b60 <SystemClock_Config>

	UART2_Init();
 8000b08:	f000 f888 	bl	8000c1c <UART2_Init>
	UART1_Init();
 8000b0c:	f000 f8ac 	bl	8000c68 <UART1_Init>
	GPIO_Init();
 8000b10:	f000 f91a 	bl	8000d48 <GPIO_Init>
    TIMER6_Init();
 8000b14:	f000 f8ce 	bl	8000cb4 <TIMER6_Init>
    TIMER2_Init();
 8000b18:	f000 f8e8 	bl	8000cec <TIMER2_Init>

    //prevent uncontrolled interrupts
    TIM2->SR =  0; //
 8000b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
    TIM6->SR = 0;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <main+0x54>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]


    Step_Motor_Init();
 8000b2a:	f000 fa2d 	bl	8000f88 <Step_Motor_Init>
	Buffer_Init();
 8000b2e:	f7ff fe5d 	bl	80007ec <Buffer_Init>
	ESP_Init();
 8000b32:	f7ff fcd3 	bl	80004dc <ESP_Init>



	Uart_transmit_string((uint8_t*)"The application is running\r\n", 1);
 8000b36:	2101      	movs	r1, #1
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <main+0x58>)
 8000b3a:	f7ff feb7 	bl	80008ac <Uart_transmit_string>
	HAL_UART_Receive_IT(&huart2, &rcvd_byte,1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4905      	ldr	r1, [pc, #20]	; (8000b58 <main+0x5c>)
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <main+0x60>)
 8000b44:	f002 fc2e 	bl	80033a4 <HAL_UART_Receive_IT>

	while(1)
	{
		ESP_Server_Start();
 8000b48:	f7ff fd3e 	bl	80005c8 <ESP_Server_Start>
 8000b4c:	e7fc      	b.n	8000b48 <main+0x4c>
 8000b4e:	bf00      	nop
 8000b50:	40001000 	.word	0x40001000
 8000b54:	080045dc 	.word	0x080045dc
 8000b58:	20000248 	.word	0x20000248
 8000b5c:	200000f8 	.word	0x200000f8

08000b60 <SystemClock_Config>:
}


///////HSI 16MH
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	; 0x50
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2230      	movs	r2, #48	; 0x30
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 fca8 	bl	80044c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <SystemClock_Config+0xb4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <SystemClock_Config+0xb4>)
 8000b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <SystemClock_Config+0xb4>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <SystemClock_Config+0xb8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <SystemClock_Config+0xb8>)
 8000baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <SystemClock_Config+0xb8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fff5 	bl	8001bc0 <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000bdc:	f000 f9fa 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fa57 	bl	80020b0 <HAL_RCC_ClockConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c08:	f000 f9e4 	bl	8000fd4 <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3750      	adds	r7, #80	; 0x50
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40007000 	.word	0x40007000

08000c1c <UART2_Init>:


void UART2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <UART2_Init+0x44>)
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <UART2_Init+0x48>)
 8000c24:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <UART2_Init+0x44>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <UART2_Init+0x44>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits   = UART_STOPBITS_1;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <UART2_Init+0x44>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity     = UART_PARITY_NONE;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <UART2_Init+0x44>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <UART2_Init+0x44>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode       = UART_MODE_TX_RX;
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <UART2_Init+0x44>)
 8000c48:	220c      	movs	r2, #12
 8000c4a:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <UART2_Init+0x44>)
 8000c4e:	f002 faca 	bl	80031e6 <HAL_UART_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <UART2_Init+0x40>
	{
		Error_Handler();
 8000c58:	f000 f9bc 	bl	8000fd4 <Error_Handler>
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200000f8 	.word	0x200000f8
 8000c64:	40004400 	.word	0x40004400

08000c68 <UART1_Init>:

void UART1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <UART1_Init+0x44>)
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <UART1_Init+0x48>)
 8000c70:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <UART1_Init+0x44>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <UART1_Init+0x44>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits   = UART_STOPBITS_1;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <UART1_Init+0x44>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity     = UART_PARITY_NONE;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <UART1_Init+0x44>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
	huart1.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <UART1_Init+0x44>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
	huart1.Init.Mode       = UART_MODE_TX_RX;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <UART1_Init+0x44>)
 8000c94:	220c      	movs	r2, #12
 8000c96:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <UART1_Init+0x44>)
 8000c9a:	f002 faa4 	bl	80031e6 <HAL_UART_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <UART1_Init+0x40>
	{
		Error_Handler();
 8000ca4:	f000 f996 	bl	8000fd4 <Error_Handler>
	}
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000013c 	.word	0x2000013c
 8000cb0:	40011000 	.word	0x40011000

08000cb4 <TIMER6_Init>:

//Get one micro second
void TIMER6_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	//uint32_t pre =  HAL_RCC_GetHCLKFreq() /1000000;
	htim6.Instance = TIM6;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <TIMER6_Init+0x30>)
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <TIMER6_Init+0x34>)
 8000cbc:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 0;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <TIMER6_Init+0x30>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
    htim6.Init.Period    = 16-1;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <TIMER6_Init+0x30>)
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	60da      	str	r2, [r3, #12]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <TIMER6_Init+0x30>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]

    if(HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <TIMER6_Init+0x30>)
 8000cd2:	f001 fc0d 	bl	80024f0 <HAL_TIM_Base_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <TIMER6_Init+0x2c>
    {
    	Error_Handler();
 8000cdc:	f000 f97a 	bl	8000fd4 <Error_Handler>
    }

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000180 	.word	0x20000180
 8000ce8:	40001000 	.word	0x40001000

08000cec <TIMER2_Init>:

void TIMER2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef timPWM_init;

	htim2.Instance = TIM2;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <TIMER2_Init+0x58>)
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf8:	601a      	str	r2, [r3, #0]
	htim2.Init.Period = 50000 - 1;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <TIMER2_Init+0x58>)
 8000cfc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000d00:	60da      	str	r2, [r3, #12]
	htim2.Init.Prescaler = 16 - 1;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <TIMER2_Init+0x58>)
 8000d04:	220f      	movs	r2, #15
 8000d06:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d08:	480e      	ldr	r0, [pc, #56]	; (8000d44 <TIMER2_Init+0x58>)
 8000d0a:	f001 fcd0 	bl	80026ae <HAL_TIM_PWM_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <TIMER2_Init+0x2c>
	{
		Error_Handler();
 8000d14:	f000 f95e 	bl	8000fd4 <Error_Handler>
	}

	timPWM_init.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	; 0x60
 8000d1a:	607b      	str	r3, [r7, #4]
	timPWM_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]

	timPWM_init.Pulse   = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htim2, &timPWM_init, TIM_CHANNEL_1) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <TIMER2_Init+0x58>)
 8000d2c:	f001 fede 	bl	8002aec <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <TIMER2_Init+0x4e>
	{
		Error_Handler();
 8000d36:	f000 f94d 	bl	8000fd4 <Error_Handler>
	}

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001c8 	.word	0x200001c8

08000d48 <GPIO_Init>:

void GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <GPIO_Init+0x80>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <GPIO_Init+0x80>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <GPIO_Init+0x80>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef stepgpio;

	stepgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
	stepgpio.Pin  = GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_8; //pin7 is for direction, pin9 is for step
 8000d6e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000d72:	61fb      	str	r3, [r7, #28]
	stepgpio.Speed = GPIO_SPEED_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
	stepgpio.Pull  = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOE,&stepgpio);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <GPIO_Init+0x84>)
 8000d84:	f000 fd66 	bl	8001854 <HAL_GPIO_Init>



	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <GPIO_Init+0x80>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <GPIO_Init+0x80>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <GPIO_Init+0x80>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef pwmgpio;

	pwmgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
	pwmgpio.Pin  = GPIO_PIN_1;
 8000da8:	2302      	movs	r3, #2
 8000daa:	60bb      	str	r3, [r7, #8]
	pwmgpio.Speed = GPIO_SPEED_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
	pwmgpio.Pull  = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA,&pwmgpio);
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <GPIO_Init+0x88>)
 8000dbc:	f000 fd4a 	bl	8001854 <HAL_GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	3730      	adds	r7, #48	; 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    if(rx_buffer.tail != ((rx_buffer.head + 1) %  BUFFERSIZE))
 8000ddc:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000dde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	4618      	mov	r0, r3
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000de8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <HAL_UART_RxCpltCallback+0x104>)
 8000df2:	fb83 1302 	smull	r1, r3, r3, r2
 8000df6:	1159      	asrs	r1, r3, #5
 8000df8:	17d3      	asrs	r3, r2, #31
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	2164      	movs	r1, #100	; 0x64
 8000dfe:	fb01 f303 	mul.w	r3, r1, r3
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	4298      	cmp	r0, r3
 8000e06:	d05a      	beq.n	8000ebe <HAL_UART_RxCpltCallback+0xea>
    {

		if( (rcvd_byte == '\n'))
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <HAL_UART_RxCpltCallback+0x108>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b0a      	cmp	r3, #10
 8000e0e:	d134      	bne.n	8000e7a <HAL_UART_RxCpltCallback+0xa6>
		{

			rx_buffer.buffer[rx_buffer.head] = rcvd_byte;
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b30      	ldr	r3, [pc, #192]	; (8000edc <HAL_UART_RxCpltCallback+0x108>)
 8000e1c:	7819      	ldrb	r1, [r3, #0]
 8000e1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e20:	5499      	strb	r1, [r3, r2]
			rx_buffer.head = (rx_buffer.head + 1) %  BUFFERSIZE;
 8000e22:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e24:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a2a      	ldr	r2, [pc, #168]	; (8000ed8 <HAL_UART_RxCpltCallback+0x104>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1151      	asrs	r1, r2, #5
 8000e34:	17da      	asrs	r2, r3, #31
 8000e36:	1a8a      	subs	r2, r1, r2
 8000e38:	2164      	movs	r1, #100	; 0x64
 8000e3a:	fb01 f202 	mul.w	r2, r1, r2
 8000e3e:	1a9a      	subs	r2, r3, r2
 8000e40:	b292      	uxth	r2, r2
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e44:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

			if((rx_buffer.buffer[rx_buffer.head -4] == 'O') && (rx_buffer.buffer[rx_buffer.head -3] == 'K'))
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	3b04      	subs	r3, #4
 8000e52:	4a20      	ldr	r2, [pc, #128]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	2b4f      	cmp	r3, #79	; 0x4f
 8000e58:	d12b      	bne.n	8000eb2 <HAL_UART_RxCpltCallback+0xde>
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e5c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	3b03      	subs	r3, #3
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e66:	5cd3      	ldrb	r3, [r2, r3]
 8000e68:	2b4b      	cmp	r3, #75	; 0x4b
 8000e6a:	d122      	bne.n	8000eb2 <HAL_UART_RxCpltCallback+0xde>
			{
				HAL_UART_AbortReceive_IT(&huart2);
 8000e6c:	481c      	ldr	r0, [pc, #112]	; (8000ee0 <HAL_UART_RxCpltCallback+0x10c>)
 8000e6e:	f002 fac9 	bl	8003404 <HAL_UART_AbortReceive_IT>
				receive_complete_flag = 1;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_UART_RxCpltCallback+0x110>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e01b      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0xde>
			}
		}
		else
		{
			rx_buffer.buffer[rx_buffer.head] = rcvd_byte;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e7c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_UART_RxCpltCallback+0x108>)
 8000e86:	7819      	ldrb	r1, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e8a:	5499      	strb	r1, [r3, r2]
			rx_buffer.head = (rx_buffer.head + 1) %  BUFFERSIZE;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000e8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	3301      	adds	r3, #1
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <HAL_UART_RxCpltCallback+0x104>)
 8000e98:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9c:	1151      	asrs	r1, r2, #5
 8000e9e:	17da      	asrs	r2, r3, #31
 8000ea0:	1a8a      	subs	r2, r1, r2
 8000ea2:	2164      	movs	r1, #100	; 0x64
 8000ea4:	fb01 f202 	mul.w	r2, r1, r2
 8000ea8:	1a9a      	subs	r2, r3, r2
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_UART_RxCpltCallback+0x100>)
 8000eae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		}


		HAL_UART_Receive_IT(&huart2, &rcvd_byte,1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4909      	ldr	r1, [pc, #36]	; (8000edc <HAL_UART_RxCpltCallback+0x108>)
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <HAL_UART_RxCpltCallback+0x10c>)
 8000eb8:	f002 fa74 	bl	80033a4 <HAL_UART_Receive_IT>
    {
    	receive_buffer_full_flag = 1;
    	rcvd_byte = rcvd_byte;

    }
}
 8000ebc:	e006      	b.n	8000ecc <HAL_UART_RxCpltCallback+0xf8>
    	receive_buffer_full_flag = 1;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_UART_RxCpltCallback+0x114>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
    	rcvd_byte = rcvd_byte;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_UART_RxCpltCallback+0x108>)
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_UART_RxCpltCallback+0x108>)
 8000eca:	701a      	strb	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000028 	.word	0x20000028
 8000ed8:	51eb851f 	.word	0x51eb851f
 8000edc:	20000248 	.word	0x20000248
 8000ee0:	200000f8 	.word	0x200000f8
 8000ee4:	20000249 	.word	0x20000249
 8000ee8:	2000024a 	.word	0x2000024a

08000eec <delay_us>:




void delay_us(uint32_t time)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim6);
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <delay_us+0x40>)
 8000ef6:	f001 fb4b 	bl	8002590 <HAL_TIM_Base_Start>
	while(time)
 8000efa:	e00c      	b.n	8000f16 <delay_us+0x2a>
	{
		//check update event flag is set
	    while( !(TIM6->SR & TIM_SR_UIF));
 8000efc:	bf00      	nop
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <delay_us+0x44>)
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f9      	beq.n	8000efe <delay_us+0x12>
		TIM6->SR = 0; //clear TIM_SR_UIF
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <delay_us+0x44>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
		--time;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
	while(time)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1ef      	bne.n	8000efc <delay_us+0x10>
	}
	HAL_TIM_Base_Stop(&htim6);
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <delay_us+0x40>)
 8000f1e:	f001 fb9f 	bl	8002660 <HAL_TIM_Base_Stop>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000180 	.word	0x20000180
 8000f30:	40001000 	.word	0x40001000

08000f34 <delay_ms>:

void delay_ms(uint32_t time)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	time = time * 1000;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f42:	fb02 f303 	mul.w	r3, r2, r3
 8000f46:	607b      	str	r3, [r7, #4]
	HAL_TIM_Base_Start(&htim6);
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <delay_ms+0x4c>)
 8000f4a:	f001 fb21 	bl	8002590 <HAL_TIM_Base_Start>

	while(time)
 8000f4e:	e00c      	b.n	8000f6a <delay_ms+0x36>
	{
		//check update event flag is set
		while( !(TIM6->SR & TIM_SR_UIF));
 8000f50:	bf00      	nop
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <delay_ms+0x50>)
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f9      	beq.n	8000f52 <delay_ms+0x1e>
		TIM6->SR = 0; //clear TIM_SR_UIF
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <delay_ms+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
		--time;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
	while(time)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1ef      	bne.n	8000f50 <delay_ms+0x1c>
	}

	HAL_TIM_Base_Stop(&htim6);
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <delay_ms+0x4c>)
 8000f72:	f001 fb75 	bl	8002660 <HAL_TIM_Base_Stop>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000180 	.word	0x20000180
 8000f84:	40001000 	.word	0x40001000

08000f88 <Step_Motor_Init>:

void Step_Motor_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	stepMotor1.GPIOx = GPIOE;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <Step_Motor_Init+0x40>)
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <Step_Motor_Init+0x44>)
 8000f90:	615a      	str	r2, [r3, #20]
	stepMotor1.pin_dir = GPIO_PIN_7;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <Step_Motor_Init+0x40>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	835a      	strh	r2, [r3, #26]
	stepMotor1.pin_step = GPIO_PIN_9;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <Step_Motor_Init+0x40>)
 8000f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9e:	831a      	strh	r2, [r3, #24]

	InitializeStepper(&stepMotor1);
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <Step_Motor_Init+0x40>)
 8000fa2:	f000 f923 	bl	80011ec <InitializeStepper>


	stepMotor2.GPIOx = GPIOE;
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <Step_Motor_Init+0x48>)
 8000fa8:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <Step_Motor_Init+0x44>)
 8000faa:	615a      	str	r2, [r3, #20]
	stepMotor2.pin_dir = GPIO_PIN_8;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <Step_Motor_Init+0x48>)
 8000fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb2:	835a      	strh	r2, [r3, #26]
	stepMotor2.pin_step = GPIO_PIN_10;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <Step_Motor_Init+0x48>)
 8000fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fba:	831a      	strh	r2, [r3, #24]

	InitializeStepper(&stepMotor2);
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <Step_Motor_Init+0x48>)
 8000fbe:	f000 f915 	bl	80011ec <InitializeStepper>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000210 	.word	0x20000210
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	2000022c 	.word	0x2000022c

08000fd4 <Error_Handler>:


void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	while(1);
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x4>
	...

08000fdc <HAL_MspInit>:
#include "main.h"

//extern uint16_t pressed;

void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	//do low level processor specific inits
	//1. set up priority grouping of arm
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 fb57 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable reqired system exception
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_MspInit+0x40>)
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	4a0c      	ldr	r2, [pc, #48]	; (800101c <HAL_MspInit+0x40>)
 8000fec:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000ff0:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for system exceptions

	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f06f 000b 	mvn.w	r0, #11
 8000ffa:	f000 fb56 	bl	80016aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	f06f 000a 	mvn.w	r0, #10
 8001006:	f000 fb50 	bl	80016aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	f06f 0009 	mvn.w	r0, #9
 8001012:	f000 fb4a 	bl	80016aa <HAL_NVIC_SetPriority>


}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b090      	sub	sp, #64	; 0x40
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	//Enable clock paths
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <HAL_UART_MspInit+0xe0>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a33      	ldr	r2, [pc, #204]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b31      	ldr	r3, [pc, #196]	; (8001100 <HAL_UART_MspInit+0xe0>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_UART_MspInit+0xe0>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a2c      	ldr	r2, [pc, #176]	; (8001100 <HAL_UART_MspInit+0xe0>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART2_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a25      	ldr	r2, [pc, #148]	; (8001100 <HAL_UART_MspInit+0xe0>)
 800106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_USART1_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6453      	str	r3, [r2, #68]	; 0x44
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_UART_MspInit+0xe0>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]

	//configure pins for usart pins   PA2->TX, PA3->RX
	GPIO_InitTypeDef  gpio_usart2;

	gpio_usart2.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001098:	230c      	movs	r3, #12
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_usart2.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_usart2.Alternate = GPIO_AF7_USART2;
 80010a0:	2307      	movs	r3, #7
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	gpio_usart2.Pull      = GPIO_PULLUP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
	gpio_usart2.Speed     = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38

	HAL_GPIO_Init(GPIOA,&gpio_usart2);
 80010ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b0:	4619      	mov	r1, r3
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <HAL_UART_MspInit+0xe4>)
 80010b4:	f000 fbce 	bl	8001854 <HAL_GPIO_Init>


	//configure pins for usart1 pins
	GPIO_InitTypeDef  gpio_usart1;

	gpio_usart1.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80010b8:	23c0      	movs	r3, #192	; 0xc0
 80010ba:	61bb      	str	r3, [r7, #24]
	gpio_usart1.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61fb      	str	r3, [r7, #28]
	gpio_usart1.Alternate = GPIO_AF7_USART1;
 80010c0:	2307      	movs	r3, #7
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_usart1.Pull      = GPIO_PULLUP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
	gpio_usart1.Speed     = GPIO_SPEED_MEDIUM;
 80010c8:	2301      	movs	r3, #1
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOB,&gpio_usart1);
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	4619      	mov	r1, r3
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <HAL_UART_MspInit+0xe8>)
 80010d4:	f000 fbbe 	bl	8001854 <HAL_GPIO_Init>

	//configure the nvic
	HAL_NVIC_SetPriority(USART2_IRQn, 15,1);
 80010d8:	2201      	movs	r2, #1
 80010da:	210f      	movs	r1, #15
 80010dc:	2026      	movs	r0, #38	; 0x26
 80010de:	f000 fae4 	bl	80016aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010e2:	2026      	movs	r0, #38	; 0x26
 80010e4:	f000 fafd 	bl	80016e2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(USART1_IRQn, 15,0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	210f      	movs	r1, #15
 80010ec:	2025      	movs	r0, #37	; 0x25
 80010ee:	f000 fadc 	bl	80016aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010f2:	2025      	movs	r0, #37	; 0x25
 80010f4:	f000 faf5 	bl	80016e2 <HAL_NVIC_EnableIRQ>


}
 80010f8:	bf00      	nop
 80010fa:	3740      	adds	r7, #64	; 0x40
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400

0800110c <HAL_TIM_Base_MspInit>:


//for us and ms
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	//Enable clock paths
	__HAL_RCC_TIM6_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_TIM_Base_MspInit+0x3c>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_TIM_Base_MspInit+0x3c>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_TIM_Base_MspInit+0x3c>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
	//configure pins for usart pins   PA2->TX, PA3->RX

	//NOT NEEDED

	//configure the nvic
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15,0);
 8001130:	2200      	movs	r2, #0
 8001132:	210f      	movs	r1, #15
 8001134:	2036      	movs	r0, #54	; 0x36
 8001136:	f000 fab8 	bl	80016aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800113a:	2036      	movs	r0, #54	; 0x36
 800113c:	f000 fad1 	bl	80016e2 <HAL_NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2OC_ch_gpios;

	//1. enable peripheral clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_TIM_PWM_MspInit+0x74>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <HAL_TIM_PWM_MspInit+0x74>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_TIM_PWM_MspInit+0x74>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_TIM_PWM_MspInit+0x74>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <HAL_TIM_PWM_MspInit+0x74>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_TIM_PWM_MspInit+0x74>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

	//2. configure gpıos to behave as timer to channel 1,2,3 and 4
	//                              CH1        CH2           CH3         CH4
	tim2OC_ch_gpios.Pin       = GPIO_PIN_0 | GPIO_PIN_1;
 800118c:	2303      	movs	r3, #3
 800118e:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 8001194:	2301      	movs	r3, #1
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
	tim2OC_ch_gpios.Pull      = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA,&tim2OC_ch_gpios);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <HAL_TIM_PWM_MspInit+0x78>)
 80011a4:	f000 fb56 	bl	8001854 <HAL_GPIO_Init>



	//3. NVIV settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15,0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	210f      	movs	r1, #15
 80011ac:	201c      	movs	r0, #28
 80011ae:	f000 fa7c 	bl	80016aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011b2:	201c      	movs	r0, #28
 80011b4:	f000 fa95 	bl	80016e2 <HAL_NVIC_EnableIRQ>
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) {
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
    // Check if EXTI Line0 is the source of the interrupt
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET) {
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <EXTI0_IRQHandler+0x20>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <EXTI0_IRQHandler+0x16>
        // Clear the EXTI line pending bit
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <EXTI0_IRQHandler+0x20>)
 80011da:	2201      	movs	r2, #1
 80011dc:	615a      	str	r2, [r3, #20]

        // Update the 'pressed' variable based on the user button state
        //pressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
    }
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40013c00 	.word	0x40013c00

080011ec <InitializeStepper>:
  * @func   setDirection  Initialize the starting direction of stepper motor in clockwise direction

  */

void InitializeStepper( StepperMotor *stepper)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	stepper->usDelay = 500;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011fa:	609a      	str	r2, [r3, #8]
	stepper->stepSize = 200;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	22c8      	movs	r2, #200	; 0xc8
 8001200:	605a      	str	r2, [r3, #4]

	setDirection(stepper,0);
 8001202:	2100      	movs	r1, #0
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f807 	bl	8001218 <setDirection>
	stepper->moveState = false;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	741a      	strb	r2, [r3, #16]

}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <setDirection>:




void setDirection( StepperMotor *stepper,uint16_t direction)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
	stepper->shaftDirection = direction;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(stepper->GPIOx, stepper->pin_dir, stepper->shaftDirection);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6958      	ldr	r0, [r3, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	8b59      	ldrh	r1, [r3, #26]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	f000 fca7 	bl	8001b8c <HAL_GPIO_WritePin>
	delay_us(stepper->usDelay);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe52 	bl	8000eec <delay_us>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <moveContinous>:
	stepper->usDelay = 500 + ((2000-500)/(10 - 1) * speed);
}


void moveContinous(StepperMotor *stepper)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	stepper->moveState = 1;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	741a      	strb	r2, [r3, #16]
	while(stepper->moveState == 1)
 800125e:	e019      	b.n	8001294 <moveContinous+0x44>
	{
		HAL_GPIO_WritePin(stepper->GPIOx, stepper->pin_step, GPIO_PIN_SET);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6958      	ldr	r0, [r3, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	8b1b      	ldrh	r3, [r3, #24]
 8001268:	2201      	movs	r2, #1
 800126a:	4619      	mov	r1, r3
 800126c:	f000 fc8e 	bl	8001b8c <HAL_GPIO_WritePin>
		delay_us(stepper->usDelay);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe39 	bl	8000eec <delay_us>
		HAL_GPIO_WritePin(stepper->GPIOx, stepper->pin_step, GPIO_PIN_RESET);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6958      	ldr	r0, [r3, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	8b1b      	ldrh	r3, [r3, #24]
 8001282:	2200      	movs	r2, #0
 8001284:	4619      	mov	r1, r3
 8001286:	f000 fc81 	bl	8001b8c <HAL_GPIO_WritePin>
		delay_us(stepper->usDelay);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fe2c 	bl	8000eec <delay_us>
	while(stepper->moveState == 1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7c1b      	ldrb	r3, [r3, #16]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d0e1      	beq.n	8001260 <moveContinous+0x10>
	}
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <moveTwoMotorContinous>:
	}
}


void moveTwoMotorContinous( StepperMotor *stepper1, StepperMotor *stepper2)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
	stepper1->moveState = 1;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	741a      	strb	r2, [r3, #16]
	stepper2->moveState = 1;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2201      	movs	r2, #1
 80012ba:	741a      	strb	r2, [r3, #16]
	uint32_t doubler = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]

	while(stepper1->moveState )
 80012c0:	e03d      	b.n	800133e <moveTwoMotorContinous+0x98>
	{

		HAL_GPIO_WritePin(stepper1->GPIOx, stepper1->pin_step, GPIO_PIN_SET);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6958      	ldr	r0, [r3, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	8b1b      	ldrh	r3, [r3, #24]
 80012ca:	2201      	movs	r2, #1
 80012cc:	4619      	mov	r1, r3
 80012ce:	f000 fc5d 	bl	8001b8c <HAL_GPIO_WritePin>
		delay_us( (stepper1->usDelay) );
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe08 	bl	8000eec <delay_us>
		HAL_GPIO_WritePin(stepper1->GPIOx, stepper1->pin_step, GPIO_PIN_RESET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6958      	ldr	r0, [r3, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	8b1b      	ldrh	r3, [r3, #24]
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	f000 fc50 	bl	8001b8c <HAL_GPIO_WritePin>
		//delay_us((stepper1->usDelay) / divider);
		//divider = 1;
		delay_us((stepper1->usDelay) + doubler);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fdf9 	bl	8000eec <delay_us>

		if(!stepper2->moveState)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	7c1b      	ldrb	r3, [r3, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d103      	bne.n	800130a <moveTwoMotorContinous+0x64>
		{
			doubler = stepper1->usDelay;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	60fb      	str	r3, [r7, #12]
			continue;
 8001308:	e019      	b.n	800133e <moveTwoMotorContinous+0x98>
		}


		HAL_GPIO_WritePin(stepper2->GPIOx, stepper2->pin_step, GPIO_PIN_SET);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6958      	ldr	r0, [r3, #20]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	8b1b      	ldrh	r3, [r3, #24]
 8001312:	2201      	movs	r2, #1
 8001314:	4619      	mov	r1, r3
 8001316:	f000 fc39 	bl	8001b8c <HAL_GPIO_WritePin>
		delay_us((stepper2->usDelay) );
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fde4 	bl	8000eec <delay_us>
		HAL_GPIO_WritePin(stepper2->GPIOx, stepper2->pin_step, GPIO_PIN_RESET);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	6958      	ldr	r0, [r3, #20]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	8b1b      	ldrh	r3, [r3, #24]
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	f000 fc2c 	bl	8001b8c <HAL_GPIO_WritePin>
		//delay_us((stepper2->usDelay) / divider);

		//divider = 1;
		delay_us( (stepper1->usDelay) );
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fdd7 	bl	8000eec <delay_us>
	while(stepper1->moveState )
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7c1b      	ldrb	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1bd      	bne.n	80012c2 <moveTwoMotorContinous+0x1c>
	}
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800137a:	490e      	ldr	r1, [pc, #56]	; (80013b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800137c:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001390:	4c0b      	ldr	r4, [pc, #44]	; (80013c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800139e:	f7ff ffd7 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f003 f86b 	bl	800447c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a6:	f7ff fba9 	bl	8000afc <main>
  bx  lr    
 80013aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b8:	08004624 	.word	0x08004624
  ldr r2, =_sbss
 80013bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013c0:	20000250 	.word	0x20000250

080013c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_Init+0x40>)
 80013d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_Init+0x40>)
 80013de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_Init+0x40>)
 80013ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f000 f94f 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f000 f808 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fc:	f7ff fdee 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023c00 	.word	0x40023c00

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x54>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x58>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f967 	bl	80016fe <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 f92f 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_InitTick+0x5c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000000 	.word	0x20000000
 8001464:	20000008 	.word	0x20000008
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000008 	.word	0x20000008
 8001490:	2000024c 	.word	0x2000024c

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2000024c 	.word	0x2000024c

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffee 	bl	8001494 <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014d2:	bf00      	nop
 80014d4:	f7ff ffde 	bl	8001494 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff29 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff3e 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff8e 	bl	80015e8 <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5d 	bl	8001594 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff31 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa2 	bl	8001650 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800171a:	f000 f802 	bl	8001722 <HAL_SYSTICK_Callback>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800173e:	f7ff fea9 	bl	8001494 <HAL_GetTick>
 8001742:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d008      	beq.n	8001762 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e052      	b.n	8001808 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0216 	bic.w	r2, r2, #22
 8001770:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001780:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <HAL_DMA_Abort+0x62>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0208 	bic.w	r2, r2, #8
 80017a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b2:	e013      	b.n	80017dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b4:	f7ff fe6e 	bl	8001494 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d90c      	bls.n	80017dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2220      	movs	r2, #32
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e015      	b.n	8001808 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1e4      	bne.n	80017b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	223f      	movs	r2, #63	; 0x3f
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d004      	beq.n	800182e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00c      	b.n	8001848 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2205      	movs	r2, #5
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	e16b      	b.n	8001b48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	429a      	cmp	r2, r3
 800188a:	f040 815a 	bne.w	8001b42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d005      	beq.n	80018a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d130      	bne.n	8001908 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 0201 	and.w	r2, r3, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b03      	cmp	r3, #3
 8001912:	d017      	beq.n	8001944 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d123      	bne.n	8001998 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	69b9      	ldr	r1, [r7, #24]
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80b4 	beq.w	8001b42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b60      	ldr	r3, [pc, #384]	; (8001b60 <HAL_GPIO_Init+0x30c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a5f      	ldr	r2, [pc, #380]	; (8001b60 <HAL_GPIO_Init+0x30c>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b5d      	ldr	r3, [pc, #372]	; (8001b60 <HAL_GPIO_Init+0x30c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f6:	4a5b      	ldr	r2, [pc, #364]	; (8001b64 <HAL_GPIO_Init+0x310>)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <HAL_GPIO_Init+0x314>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d02b      	beq.n	8001a7a <HAL_GPIO_Init+0x226>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a51      	ldr	r2, [pc, #324]	; (8001b6c <HAL_GPIO_Init+0x318>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d025      	beq.n	8001a76 <HAL_GPIO_Init+0x222>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a50      	ldr	r2, [pc, #320]	; (8001b70 <HAL_GPIO_Init+0x31c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d01f      	beq.n	8001a72 <HAL_GPIO_Init+0x21e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4f      	ldr	r2, [pc, #316]	; (8001b74 <HAL_GPIO_Init+0x320>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d019      	beq.n	8001a6e <HAL_GPIO_Init+0x21a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4e      	ldr	r2, [pc, #312]	; (8001b78 <HAL_GPIO_Init+0x324>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d013      	beq.n	8001a6a <HAL_GPIO_Init+0x216>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4d      	ldr	r2, [pc, #308]	; (8001b7c <HAL_GPIO_Init+0x328>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d00d      	beq.n	8001a66 <HAL_GPIO_Init+0x212>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <HAL_GPIO_Init+0x32c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d007      	beq.n	8001a62 <HAL_GPIO_Init+0x20e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4b      	ldr	r2, [pc, #300]	; (8001b84 <HAL_GPIO_Init+0x330>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d101      	bne.n	8001a5e <HAL_GPIO_Init+0x20a>
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	e00e      	b.n	8001a7c <HAL_GPIO_Init+0x228>
 8001a5e:	2308      	movs	r3, #8
 8001a60:	e00c      	b.n	8001a7c <HAL_GPIO_Init+0x228>
 8001a62:	2306      	movs	r3, #6
 8001a64:	e00a      	b.n	8001a7c <HAL_GPIO_Init+0x228>
 8001a66:	2305      	movs	r3, #5
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_Init+0x228>
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x228>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x228>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x228>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x228>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f002 0203 	and.w	r2, r2, #3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a8c:	4935      	ldr	r1, [pc, #212]	; (8001b64 <HAL_GPIO_Init+0x310>)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001abe:	4a32      	ldr	r2, [pc, #200]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac4:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae8:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b12:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b3c:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	f67f ae90 	bls.w	8001870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40021400 	.word	0x40021400
 8001b80:	40021800 	.word	0x40021800
 8001b84:	40021c00 	.word	0x40021c00
 8001b88:	40013c00 	.word	0x40013c00

08001b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ba8:	e003      	b.n	8001bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	041a      	lsls	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	619a      	str	r2, [r3, #24]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e267      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d075      	beq.n	8001cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bde:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d00c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bea:	4b85      	ldr	r3, [pc, #532]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d112      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf6:	4b82      	ldr	r3, [pc, #520]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c02:	d10b      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	4b7e      	ldr	r3, [pc, #504]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d05b      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x108>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d157      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e242      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d106      	bne.n	8001c34 <HAL_RCC_OscConfig+0x74>
 8001c26:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x98>
 8001c3e:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6f      	ldr	r2, [pc, #444]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6c      	ldr	r2, [pc, #432]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c58:	4b69      	ldr	r3, [pc, #420]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a68      	ldr	r2, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a65      	ldr	r2, [pc, #404]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fc0c 	bl	8001494 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fc08 	bl	8001494 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e207      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xc0>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fbf8 	bl	8001494 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fbf4 	bl	8001494 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1f3      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b51      	ldr	r3, [pc, #324]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xe8>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cd6:	4b4a      	ldr	r3, [pc, #296]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce2:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cee:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x152>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1c7      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4937      	ldr	r1, [pc, #220]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_OscConfig+0x244>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff fbad 	bl	8001494 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fba9 	bl	8001494 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1a8      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4925      	ldr	r1, [pc, #148]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_RCC_OscConfig+0x244>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff fb8c 	bl	8001494 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fb88 	bl	8001494 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e187      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d036      	beq.n	8001e18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d016      	beq.n	8001de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_RCC_OscConfig+0x248>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff fb6c 	bl	8001494 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fb68 	bl	8001494 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e167      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x200>
 8001dde:	e01b      	b.n	8001e18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_OscConfig+0x248>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fb55 	bl	8001494 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	e00e      	b.n	8001e0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dee:	f7ff fb51 	bl	8001494 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d907      	bls.n	8001e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e150      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	42470000 	.word	0x42470000
 8001e08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1ea      	bne.n	8001dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 8097 	beq.w	8001f54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2a:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b7d      	ldr	r3, [pc, #500]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a7c      	ldr	r2, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e56:	4b77      	ldr	r3, [pc, #476]	; (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e62:	4b74      	ldr	r3, [pc, #464]	; (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a73      	ldr	r2, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fb11 	bl	8001494 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7ff fb0d 	bl	8001494 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e10c      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2ea>
 8001e9c:	4b64      	ldr	r3, [pc, #400]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a63      	ldr	r2, [pc, #396]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	e01c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x324>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x30c>
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	4a5e      	ldr	r2, [pc, #376]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ebe:	4b5c      	ldr	r3, [pc, #368]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a5b      	ldr	r2, [pc, #364]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x324>
 8001ecc:	4b58      	ldr	r3, [pc, #352]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a57      	ldr	r2, [pc, #348]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed8:	4b55      	ldr	r3, [pc, #340]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ede:	f023 0304 	bic.w	r3, r3, #4
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d015      	beq.n	8001f18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff fad2 	bl	8001494 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f7ff face 	bl	8001494 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e0cb      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0a:	4b49      	ldr	r3, [pc, #292]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0ee      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x334>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7ff fabc 	bl	8001494 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f7ff fab8 	bl	8001494 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0b5      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f36:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ee      	bne.n	8001f20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f48:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a38      	ldr	r2, [pc, #224]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80a1 	beq.w	80020a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f5e:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d05c      	beq.n	8002024 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d141      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCC_OscConfig+0x478>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fa8c 	bl	8001494 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff fa88 	bl	8001494 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e087      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	491b      	ldr	r1, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x478>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7ff fa61 	bl	8001494 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff fa5d 	bl	8001494 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e05c      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x416>
 8001ff4:	e054      	b.n	80020a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_RCC_OscConfig+0x478>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fa4a 	bl	8001494 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff fa46 	bl	8001494 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e045      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x444>
 8002022:	e03d      	b.n	80020a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e038      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
 8002030:	40023800 	.word	0x40023800
 8002034:	40007000 	.word	0x40007000
 8002038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x4ec>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d028      	beq.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d121      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d11a      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002074:	4293      	cmp	r3, r2
 8002076:	d111      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	3b01      	subs	r3, #1
 8002086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0cc      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4b68      	ldr	r3, [pc, #416]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d90c      	bls.n	80020ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b63      	ldr	r3, [pc, #396]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b8      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002104:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800210e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800211c:	4b53      	ldr	r3, [pc, #332]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4a52      	ldr	r2, [pc, #328]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	494d      	ldr	r1, [pc, #308]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d044      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d119      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e07f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d003      	beq.n	800216e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216a:	2b03      	cmp	r3, #3
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217e:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e067      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218e:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 0203 	bic.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4934      	ldr	r1, [pc, #208]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a0:	f7ff f978 	bl	8001494 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	e00a      	b.n	80021be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a8:	f7ff f974 	bl	8001494 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e04f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	4b2b      	ldr	r3, [pc, #172]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 020c 	and.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d1eb      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d20c      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b22      	ldr	r3, [pc, #136]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e032      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4916      	ldr	r1, [pc, #88]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	490e      	ldr	r1, [pc, #56]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002236:	f000 f821 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800223a:	4602      	mov	r2, r0
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	490a      	ldr	r1, [pc, #40]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	5ccb      	ldrb	r3, [r1, r3]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f8d8 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023c00 	.word	0x40023c00
 800226c:	40023800 	.word	0x40023800
 8002270:	080045fc 	.word	0x080045fc
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002280:	b094      	sub	sp, #80	; 0x50
 8002282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	647b      	str	r3, [r7, #68]	; 0x44
 8002288:	2300      	movs	r3, #0
 800228a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800228c:	2300      	movs	r3, #0
 800228e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002294:	4b79      	ldr	r3, [pc, #484]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d00d      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x40>
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	f200 80e1 	bhi.w	8002468 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x34>
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ae:	e0db      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b73      	ldr	r3, [pc, #460]	; (8002480 <HAL_RCC_GetSysClockFreq+0x204>)
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022b4:	e0db      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b6:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCC_GetSysClockFreq+0x208>)
 80022b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ba:	e0d8      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022bc:	4b6f      	ldr	r3, [pc, #444]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c6:	4b6d      	ldr	r3, [pc, #436]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d063      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d2:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	2200      	movs	r2, #0
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38
 80022dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
 80022e6:	2300      	movs	r3, #0
 80022e8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022ee:	4622      	mov	r2, r4
 80022f0:	462b      	mov	r3, r5
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	0159      	lsls	r1, r3, #5
 80022fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002300:	0150      	lsls	r0, r2, #5
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4621      	mov	r1, r4
 8002308:	1a51      	subs	r1, r2, r1
 800230a:	6139      	str	r1, [r7, #16]
 800230c:	4629      	mov	r1, r5
 800230e:	eb63 0301 	sbc.w	r3, r3, r1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002320:	4659      	mov	r1, fp
 8002322:	018b      	lsls	r3, r1, #6
 8002324:	4651      	mov	r1, sl
 8002326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800232a:	4651      	mov	r1, sl
 800232c:	018a      	lsls	r2, r1, #6
 800232e:	4651      	mov	r1, sl
 8002330:	ebb2 0801 	subs.w	r8, r2, r1
 8002334:	4659      	mov	r1, fp
 8002336:	eb63 0901 	sbc.w	r9, r3, r1
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800234a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800234e:	4690      	mov	r8, r2
 8002350:	4699      	mov	r9, r3
 8002352:	4623      	mov	r3, r4
 8002354:	eb18 0303 	adds.w	r3, r8, r3
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	462b      	mov	r3, r5
 800235c:	eb49 0303 	adc.w	r3, r9, r3
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800236e:	4629      	mov	r1, r5
 8002370:	024b      	lsls	r3, r1, #9
 8002372:	4621      	mov	r1, r4
 8002374:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002378:	4621      	mov	r1, r4
 800237a:	024a      	lsls	r2, r1, #9
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002382:	2200      	movs	r2, #0
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
 8002386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800238c:	f7fd ff24 	bl	80001d8 <__aeabi_uldivmod>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4613      	mov	r3, r2
 8002396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002398:	e058      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800239a:	4b38      	ldr	r3, [pc, #224]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	2200      	movs	r2, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	4611      	mov	r1, r2
 80023a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023b4:	4642      	mov	r2, r8
 80023b6:	464b      	mov	r3, r9
 80023b8:	f04f 0000 	mov.w	r0, #0
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	0159      	lsls	r1, r3, #5
 80023c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c6:	0150      	lsls	r0, r2, #5
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4641      	mov	r1, r8
 80023ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80023d2:	4649      	mov	r1, r9
 80023d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023ec:	ebb2 040a 	subs.w	r4, r2, sl
 80023f0:	eb63 050b 	sbc.w	r5, r3, fp
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	00eb      	lsls	r3, r5, #3
 80023fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002402:	00e2      	lsls	r2, r4, #3
 8002404:	4614      	mov	r4, r2
 8002406:	461d      	mov	r5, r3
 8002408:	4643      	mov	r3, r8
 800240a:	18e3      	adds	r3, r4, r3
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	464b      	mov	r3, r9
 8002410:	eb45 0303 	adc.w	r3, r5, r3
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002422:	4629      	mov	r1, r5
 8002424:	028b      	lsls	r3, r1, #10
 8002426:	4621      	mov	r1, r4
 8002428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800242c:	4621      	mov	r1, r4
 800242e:	028a      	lsls	r2, r1, #10
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002436:	2200      	movs	r2, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	61fa      	str	r2, [r7, #28]
 800243c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002440:	f7fd feca 	bl	80001d8 <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4613      	mov	r3, r2
 800244a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	3301      	adds	r3, #1
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800245c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800245e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002466:	e002      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_GetSysClockFreq+0x204>)
 800246a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800246c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002470:	4618      	mov	r0, r3
 8002472:	3750      	adds	r7, #80	; 0x50
 8002474:	46bd      	mov	sp, r7
 8002476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	00f42400 	.word	0x00f42400
 8002484:	007a1200 	.word	0x007a1200

08002488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_RCC_GetHCLKFreq+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000000 	.word	0x20000000

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a4:	f7ff fff0 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0a9b      	lsrs	r3, r3, #10
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	0800460c 	.word	0x0800460c

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024cc:	f7ff ffdc 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0b5b      	lsrs	r3, r3, #13
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4903      	ldr	r1, [pc, #12]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	0800460c 	.word	0x0800460c

080024f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e041      	b.n	8002586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fdf8 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f000 fbd0 	bl	8002cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d001      	beq.n	80025a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e046      	b.n	8002636 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a23      	ldr	r2, [pc, #140]	; (8002644 <HAL_TIM_Base_Start+0xb4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d022      	beq.n	8002600 <HAL_TIM_Base_Start+0x70>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c2:	d01d      	beq.n	8002600 <HAL_TIM_Base_Start+0x70>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_TIM_Base_Start+0xb8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d018      	beq.n	8002600 <HAL_TIM_Base_Start+0x70>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1e      	ldr	r2, [pc, #120]	; (800264c <HAL_TIM_Base_Start+0xbc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <HAL_TIM_Base_Start+0x70>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <HAL_TIM_Base_Start+0xc0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00e      	beq.n	8002600 <HAL_TIM_Base_Start+0x70>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_TIM_Base_Start+0xc4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_TIM_Base_Start+0x70>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a19      	ldr	r2, [pc, #100]	; (8002658 <HAL_TIM_Base_Start+0xc8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_TIM_Base_Start+0x70>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_TIM_Base_Start+0xcc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d111      	bne.n	8002624 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b06      	cmp	r3, #6
 8002610:	d010      	beq.n	8002634 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	e007      	b.n	8002634 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40000400 	.word	0x40000400
 800264c:	40000800 	.word	0x40000800
 8002650:	40000c00 	.word	0x40000c00
 8002654:	40010400 	.word	0x40010400
 8002658:	40014000 	.word	0x40014000
 800265c:	40001800 	.word	0x40001800

08002660 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a1a      	ldr	r2, [r3, #32]
 800266e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10f      	bne.n	8002698 <HAL_TIM_Base_Stop+0x38>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6a1a      	ldr	r2, [r3, #32]
 800267e:	f240 4344 	movw	r3, #1092	; 0x444
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <HAL_TIM_Base_Stop+0x38>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e041      	b.n	8002744 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7fe fd39 	bl	800114c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4610      	mov	r0, r2
 80026ee:	f000 faf1 	bl	8002cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_TIM_PWM_Start+0x24>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e022      	b.n	80027b6 <HAL_TIM_PWM_Start+0x6a>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d109      	bne.n	800278a <HAL_TIM_PWM_Start+0x3e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	e015      	b.n	80027b6 <HAL_TIM_PWM_Start+0x6a>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d109      	bne.n	80027a4 <HAL_TIM_PWM_Start+0x58>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e008      	b.n	80027b6 <HAL_TIM_PWM_Start+0x6a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07c      	b.n	80028b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_PWM_Start+0x82>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027cc:	e013      	b.n	80027f6 <HAL_TIM_PWM_Start+0xaa>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d104      	bne.n	80027de <HAL_TIM_PWM_Start+0x92>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027dc:	e00b      	b.n	80027f6 <HAL_TIM_PWM_Start+0xaa>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_PWM_Start+0xa2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027ec:	e003      	b.n	80027f6 <HAL_TIM_PWM_Start+0xaa>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fcb8 	bl	8003174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2d      	ldr	r2, [pc, #180]	; (80028c0 <HAL_TIM_PWM_Start+0x174>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_TIM_PWM_Start+0xcc>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2c      	ldr	r2, [pc, #176]	; (80028c4 <HAL_TIM_PWM_Start+0x178>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d101      	bne.n	800281c <HAL_TIM_PWM_Start+0xd0>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <HAL_TIM_PWM_Start+0xd2>
 800281c:	2300      	movs	r3, #0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_TIM_PWM_Start+0x174>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <HAL_TIM_PWM_Start+0x136>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d01d      	beq.n	8002882 <HAL_TIM_PWM_Start+0x136>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_TIM_PWM_Start+0x17c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d018      	beq.n	8002882 <HAL_TIM_PWM_Start+0x136>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_TIM_PWM_Start+0x180>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_TIM_PWM_Start+0x136>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_TIM_PWM_Start+0x184>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_TIM_PWM_Start+0x136>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <HAL_TIM_PWM_Start+0x178>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_TIM_PWM_Start+0x136>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <HAL_TIM_PWM_Start+0x188>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_TIM_PWM_Start+0x136>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_TIM_PWM_Start+0x18c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d111      	bne.n	80028a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b06      	cmp	r3, #6
 8002892:	d010      	beq.n	80028b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	e007      	b.n	80028b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40010400 	.word	0x40010400
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40000800 	.word	0x40000800
 80028d0:	40000c00 	.word	0x40000c00
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40001800 	.word	0x40001800

080028dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d122      	bne.n	8002938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d11b      	bne.n	8002938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0202 	mvn.w	r2, #2
 8002908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f9ba 	bl	8002c98 <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f9ac 	bl	8002c84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f9bd 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d122      	bne.n	800298c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b04      	cmp	r3, #4
 8002952:	d11b      	bne.n	800298c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0204 	mvn.w	r2, #4
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f990 	bl	8002c98 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f982 	bl	8002c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f993 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b08      	cmp	r3, #8
 8002998:	d122      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d11b      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0208 	mvn.w	r2, #8
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2204      	movs	r2, #4
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f966 	bl	8002c98 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f958 	bl	8002c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f969 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d122      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d11b      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0210 	mvn.w	r2, #16
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2208      	movs	r2, #8
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f93c 	bl	8002c98 <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f92e 	bl	8002c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f93f 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d10e      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d107      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0201 	mvn.w	r2, #1
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f908 	bl	8002c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d10e      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b80      	cmp	r3, #128	; 0x80
 8002a7a:	d107      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fba3 	bl	80031d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d107      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f904 	bl	8002cc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d107      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0220 	mvn.w	r2, #32
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fb6d 	bl	80031be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e0ae      	b.n	8002c68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	f200 809f 	bhi.w	8002c58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b1a:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b55 	.word	0x08002b55
 8002b24:	08002c59 	.word	0x08002c59
 8002b28:	08002c59 	.word	0x08002c59
 8002b2c:	08002c59 	.word	0x08002c59
 8002b30:	08002b95 	.word	0x08002b95
 8002b34:	08002c59 	.word	0x08002c59
 8002b38:	08002c59 	.word	0x08002c59
 8002b3c:	08002c59 	.word	0x08002c59
 8002b40:	08002bd7 	.word	0x08002bd7
 8002b44:	08002c59 	.word	0x08002c59
 8002b48:	08002c59 	.word	0x08002c59
 8002b4c:	08002c59 	.word	0x08002c59
 8002b50:	08002c17 	.word	0x08002c17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f95a 	bl	8002e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0208 	orr.w	r2, r2, #8
 8002b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0204 	bic.w	r2, r2, #4
 8002b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6999      	ldr	r1, [r3, #24]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	619a      	str	r2, [r3, #24]
      break;
 8002b92:	e064      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f9aa 	bl	8002ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6999      	ldr	r1, [r3, #24]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	021a      	lsls	r2, r3, #8
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	619a      	str	r2, [r3, #24]
      break;
 8002bd4:	e043      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f9ff 	bl	8002fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0208 	orr.w	r2, r2, #8
 8002bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0204 	bic.w	r2, r2, #4
 8002c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69d9      	ldr	r1, [r3, #28]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]
      break;
 8002c14:	e023      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fa53 	bl	80030c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69d9      	ldr	r1, [r3, #28]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	021a      	lsls	r2, r3, #8
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	61da      	str	r2, [r3, #28]
      break;
 8002c56:	e002      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a40      	ldr	r2, [pc, #256]	; (8002de8 <TIM_Base_SetConfig+0x114>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d013      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf2:	d00f      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3d      	ldr	r2, [pc, #244]	; (8002dec <TIM_Base_SetConfig+0x118>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00b      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3c      	ldr	r2, [pc, #240]	; (8002df0 <TIM_Base_SetConfig+0x11c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d007      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3b      	ldr	r2, [pc, #236]	; (8002df4 <TIM_Base_SetConfig+0x120>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a3a      	ldr	r2, [pc, #232]	; (8002df8 <TIM_Base_SetConfig+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d108      	bne.n	8002d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <TIM_Base_SetConfig+0x114>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d027      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <TIM_Base_SetConfig+0x118>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d023      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <TIM_Base_SetConfig+0x11c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01f      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <TIM_Base_SetConfig+0x120>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01b      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <TIM_Base_SetConfig+0x124>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d017      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <TIM_Base_SetConfig+0x128>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <TIM_Base_SetConfig+0x12c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00f      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a26      	ldr	r2, [pc, #152]	; (8002e04 <TIM_Base_SetConfig+0x130>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <TIM_Base_SetConfig+0x134>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <TIM_Base_SetConfig+0x138>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a23      	ldr	r2, [pc, #140]	; (8002e10 <TIM_Base_SetConfig+0x13c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <TIM_Base_SetConfig+0x114>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_Base_SetConfig+0xf8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <TIM_Base_SetConfig+0x124>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d103      	bne.n	8002dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	615a      	str	r2, [r3, #20]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40010400 	.word	0x40010400
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40014400 	.word	0x40014400
 8002e04:	40014800 	.word	0x40014800
 8002e08:	40001800 	.word	0x40001800
 8002e0c:	40001c00 	.word	0x40001c00
 8002e10:	40002000 	.word	0x40002000

08002e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f023 0201 	bic.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f023 0302 	bic.w	r3, r3, #2
 8002e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a20      	ldr	r2, [pc, #128]	; (8002eec <TIM_OC1_SetConfig+0xd8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <TIM_OC1_SetConfig+0x64>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <TIM_OC1_SetConfig+0xdc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10c      	bne.n	8002e92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f023 0308 	bic.w	r3, r3, #8
 8002e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a15      	ldr	r2, [pc, #84]	; (8002eec <TIM_OC1_SetConfig+0xd8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d003      	beq.n	8002ea2 <TIM_OC1_SetConfig+0x8e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <TIM_OC1_SetConfig+0xdc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d111      	bne.n	8002ec6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	621a      	str	r2, [r3, #32]
}
 8002ee0:	bf00      	nop
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f023 0210 	bic.w	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f023 0320 	bic.w	r3, r3, #32
 8002f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a22      	ldr	r2, [pc, #136]	; (8002fd8 <TIM_OC2_SetConfig+0xe4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_OC2_SetConfig+0x68>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <TIM_OC2_SetConfig+0xe8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d10d      	bne.n	8002f78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <TIM_OC2_SetConfig+0xe4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d003      	beq.n	8002f88 <TIM_OC2_SetConfig+0x94>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <TIM_OC2_SetConfig+0xe8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d113      	bne.n	8002fb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0303 	bic.w	r3, r3, #3
 8003016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <TIM_OC3_SetConfig+0xe0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <TIM_OC3_SetConfig+0x66>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <TIM_OC3_SetConfig+0xe4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10d      	bne.n	8003062 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800304c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <TIM_OC3_SetConfig+0xe0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_OC3_SetConfig+0x92>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <TIM_OC3_SetConfig+0xe4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d113      	bne.n	800309a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	621a      	str	r2, [r3, #32]
}
 80030b4:	bf00      	nop
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010400 	.word	0x40010400

080030c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	031b      	lsls	r3, r3, #12
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <TIM_OC4_SetConfig+0xa4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_OC4_SetConfig+0x68>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a11      	ldr	r2, [pc, #68]	; (8003170 <TIM_OC4_SetConfig+0xa8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d109      	bne.n	8003144 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	019b      	lsls	r3, r3, #6
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40010400 	.word	0x40010400

08003174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	2201      	movs	r2, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a1a      	ldr	r2, [r3, #32]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	43db      	mvns	r3, r3
 8003196:	401a      	ands	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e03f      	b.n	8003278 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fd ff07 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2224      	movs	r2, #36	; 0x24
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003228:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 feb2 	bl	8003f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800323e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800324e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800325e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b20      	cmp	r3, #32
 800329e:	d17c      	bne.n	800339a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_UART_Transmit+0x2c>
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e075      	b.n	800339c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_UART_Transmit+0x3e>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e06e      	b.n	800339c <HAL_UART_Transmit+0x11c>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2221      	movs	r2, #33	; 0x21
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d4:	f7fe f8de 	bl	8001494 <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	d108      	bne.n	8003302 <HAL_UART_Transmit+0x82>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d104      	bne.n	8003302 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	e003      	b.n	800330a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003312:	e02a      	b.n	800336a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2200      	movs	r2, #0
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fbda 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e036      	b.n	800339c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003342:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	3302      	adds	r3, #2
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	e007      	b.n	800335c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3301      	adds	r3, #1
 800335a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1cf      	bne.n	8003314 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2200      	movs	r2, #0
 800337c:	2140      	movs	r1, #64	; 0x40
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fbaa 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e006      	b.n	800339c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
  }
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d11d      	bne.n	80033fa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_UART_Receive_IT+0x26>
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e016      	b.n	80033fc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_UART_Receive_IT+0x38>
 80033d8:	2302      	movs	r3, #2
 80033da:	e00f      	b.n	80033fc <HAL_UART_Receive_IT+0x58>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	461a      	mov	r2, r3
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fbdf 	bl	8003bb4 <UART_Start_Receive_IT>
 80033f6:	4603      	mov	r3, r0
 80033f8:	e000      	b.n	80033fc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b09a      	sub	sp, #104	; 0x68
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003416:	e853 3f00 	ldrex	r3, [r3]
 800341a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800341c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003422:	667b      	str	r3, [r7, #100]	; 0x64
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800342c:	657a      	str	r2, [r7, #84]	; 0x54
 800342e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003430:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003432:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003434:	e841 2300 	strex	r3, r2, [r1]
 8003438:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800343a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e5      	bne.n	800340c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3314      	adds	r3, #20
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	663b      	str	r3, [r7, #96]	; 0x60
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3314      	adds	r3, #20
 800345e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003460:	643a      	str	r2, [r7, #64]	; 0x40
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003466:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e5      	bne.n	8003440 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	2b01      	cmp	r3, #1
 800347a:	d119      	bne.n	80034b0 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	e853 3f00 	ldrex	r3, [r3]
 800348a:	61fb      	str	r3, [r7, #28]
   return(result);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f023 0310 	bic.w	r3, r3, #16
 8003492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800349c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a4:	e841 2300 	strex	r3, r2, [r1]
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e5      	bne.n	800347c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d13f      	bne.n	800353e <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3314      	adds	r3, #20
 80034dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034de:	61ba      	str	r2, [r7, #24]
 80034e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6979      	ldr	r1, [r7, #20]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	613b      	str	r3, [r7, #16]
   return(result);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e5      	bne.n	80034be <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d013      	beq.n	8003522 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_UART_AbortReceive_IT+0x160>)
 8003500:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe f982 	bl	8001810 <HAL_DMA_Abort_IT>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d022      	beq.n	8003558 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800351c:	4610      	mov	r0, r2
 800351e:	4798      	blx	r3
 8003520:	e01a      	b.n	8003558 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fab8 	bl	8003aac <HAL_UART_AbortReceiveCpltCallback>
 800353c:	e00c      	b.n	8003558 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 faaa 	bl	8003aac <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3768      	adds	r7, #104	; 0x68
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	08003d1f 	.word	0x08003d1f

08003568 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b0ba      	sub	sp, #232	; 0xe8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800358e:	2300      	movs	r3, #0
 8003590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003594:	2300      	movs	r3, #0
 8003596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_UART_IRQHandler+0x66>
 80035ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fc29 	bl	8003e1e <UART_Receive_IT>
      return;
 80035cc:	e256      	b.n	8003a7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80de 	beq.w	8003794 <HAL_UART_IRQHandler+0x22c>
 80035d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80d1 	beq.w	8003794 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_UART_IRQHandler+0xae>
 80035fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f043 0201 	orr.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_UART_IRQHandler+0xd2>
 8003622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800363a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00b      	beq.n	800365e <HAL_UART_IRQHandler+0xf6>
 8003646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f043 0204 	orr.w	r2, r3, #4
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800365e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d011      	beq.n	800368e <HAL_UART_IRQHandler+0x126>
 800366a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d105      	bne.n	8003682 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0208 	orr.w	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 81ed 	beq.w	8003a72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_UART_IRQHandler+0x14e>
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fbb4 	bl	8003e1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <HAL_UART_IRQHandler+0x17a>
 80036da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d04f      	beq.n	8003782 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 faa4 	bl	8003c30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d141      	bne.n	800377a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3314      	adds	r3, #20
 80036fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800370c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3314      	adds	r3, #20
 800371e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003722:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800372e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800373a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1d9      	bne.n	80036f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	2b00      	cmp	r3, #0
 8003748:	d013      	beq.n	8003772 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	4a7d      	ldr	r2, [pc, #500]	; (8003944 <HAL_UART_IRQHandler+0x3dc>)
 8003750:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe f85a 	bl	8001810 <HAL_DMA_Abort_IT>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800376c:	4610      	mov	r0, r2
 800376e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e00e      	b.n	8003790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f990 	bl	8003a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e00a      	b.n	8003790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f98c 	bl	8003a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	e006      	b.n	8003790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f988 	bl	8003a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800378e:	e170      	b.n	8003a72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	bf00      	nop
    return;
 8003792:	e16e      	b.n	8003a72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	2b01      	cmp	r3, #1
 800379a:	f040 814a 	bne.w	8003a32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8143 	beq.w	8003a32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 813c 	beq.w	8003a32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	f040 80b4 	bne.w	8003948 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8140 	beq.w	8003a76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037fe:	429a      	cmp	r2, r3
 8003800:	f080 8139 	bcs.w	8003a76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800380a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003816:	f000 8088 	beq.w	800392a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330c      	adds	r3, #12
 8003820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003846:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800384a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003852:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800385e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1d9      	bne.n	800381a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3314      	adds	r3, #20
 800386c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3314      	adds	r3, #20
 8003886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800388a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800388e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003890:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003892:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800389c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e1      	bne.n	8003866 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3314      	adds	r3, #20
 80038c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e3      	bne.n	80038a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038fa:	f023 0310 	bic.w	r3, r3, #16
 80038fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800390c:	65ba      	str	r2, [r7, #88]	; 0x58
 800390e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003912:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e3      	bne.n	80038e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd ff03 	bl	8001730 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003932:	b29b      	uxth	r3, r3
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	b29b      	uxth	r3, r3
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8c0 	bl	8003ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003940:	e099      	b.n	8003a76 <HAL_UART_IRQHandler+0x50e>
 8003942:	bf00      	nop
 8003944:	08003cf7 	.word	0x08003cf7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003950:	b29b      	uxth	r3, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 808b 	beq.w	8003a7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8086 	beq.w	8003a7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800397e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003984:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003992:	647a      	str	r2, [r7, #68]	; 0x44
 8003994:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e3      	bne.n	800396e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3314      	adds	r3, #20
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	623b      	str	r3, [r7, #32]
   return(result);
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3314      	adds	r3, #20
 80039c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039ca:	633a      	str	r2, [r7, #48]	; 0x30
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e3      	bne.n	80039a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	330c      	adds	r3, #12
 80039f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0310 	bic.w	r3, r3, #16
 8003a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a10:	61fa      	str	r2, [r7, #28]
 8003a12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	69b9      	ldr	r1, [r7, #24]
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e3      	bne.n	80039ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f848 	bl	8003ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a30:	e023      	b.n	8003a7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_UART_IRQHandler+0x4ea>
 8003a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f97f 	bl	8003d4e <UART_Transmit_IT>
    return;
 8003a50:	e014      	b.n	8003a7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00e      	beq.n	8003a7c <HAL_UART_IRQHandler+0x514>
 8003a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f9bf 	bl	8003dee <UART_EndTransmit_IT>
    return;
 8003a70:	e004      	b.n	8003a7c <HAL_UART_IRQHandler+0x514>
    return;
 8003a72:	bf00      	nop
 8003a74:	e002      	b.n	8003a7c <HAL_UART_IRQHandler+0x514>
      return;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <HAL_UART_IRQHandler+0x514>
      return;
 8003a7a:	bf00      	nop
  }
}
 8003a7c:	37e8      	adds	r7, #232	; 0xe8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop

08003a84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b090      	sub	sp, #64	; 0x40
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae8:	e050      	b.n	8003b8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d04c      	beq.n	8003b8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003af8:	f7fd fccc 	bl	8001494 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d241      	bcs.n	8003b8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b28:	637a      	str	r2, [r7, #52]	; 0x34
 8003b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e5      	bne.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b5c:	623a      	str	r2, [r7, #32]
 8003b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	69f9      	ldr	r1, [r7, #28]
 8003b62:	6a3a      	ldr	r2, [r7, #32]
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e5      	bne.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e00f      	b.n	8003bac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4013      	ands	r3, r2
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d09f      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3740      	adds	r7, #64	; 0x40
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2222      	movs	r2, #34	; 0x22
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0220 	orr.w	r2, r2, #32
 8003c20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b095      	sub	sp, #84	; 0x54
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c58:	643a      	str	r2, [r7, #64]	; 0x40
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e5      	bne.n	8003c38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3314      	adds	r3, #20
 8003c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3314      	adds	r3, #20
 8003c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d119      	bne.n	8003cdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f023 0310 	bic.w	r3, r3, #16
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cc8:	61ba      	str	r2, [r7, #24]
 8003cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6979      	ldr	r1, [r7, #20]
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e5      	bne.n	8003ca8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cea:	bf00      	nop
 8003cec:	3754      	adds	r7, #84	; 0x54
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f7ff fec1 	bl	8003a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f7ff feb3 	bl	8003aac <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d46:	bf00      	nop
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b21      	cmp	r3, #33	; 0x21
 8003d60:	d13e      	bne.n	8003de0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6a:	d114      	bne.n	8003d96 <UART_Transmit_IT+0x48>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d110      	bne.n	8003d96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	1c9a      	adds	r2, r3, #2
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]
 8003d94:	e008      	b.n	8003da8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	1c59      	adds	r1, r3, #1
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6211      	str	r1, [r2, #32]
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4619      	mov	r1, r3
 8003db6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10f      	bne.n	8003ddc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fe38 	bl	8003a84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b08c      	sub	sp, #48	; 0x30
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b22      	cmp	r3, #34	; 0x22
 8003e30:	f040 80ab 	bne.w	8003f8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3c:	d117      	bne.n	8003e6e <UART_Receive_IT+0x50>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d113      	bne.n	8003e6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	1c9a      	adds	r2, r3, #2
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e6c:	e026      	b.n	8003ebc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e80:	d007      	beq.n	8003e92 <UART_Receive_IT+0x74>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <UART_Receive_IT+0x82>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e008      	b.n	8003eb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d15a      	bne.n	8003f86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0220 	bic.w	r2, r2, #32
 8003ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d135      	bne.n	8003f7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	613b      	str	r3, [r7, #16]
   return(result);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f023 0310 	bic.w	r3, r3, #16
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f36:	623a      	str	r2, [r7, #32]
 8003f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	69f9      	ldr	r1, [r7, #28]
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d10a      	bne.n	8003f6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fda3 	bl	8003ac0 <HAL_UARTEx_RxEventCallback>
 8003f7a:	e002      	b.n	8003f82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7fc ff29 	bl	8000dd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e002      	b.n	8003f8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3730      	adds	r7, #48	; 0x30
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f98:	b0c0      	sub	sp, #256	; 0x100
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb0:	68d9      	ldr	r1, [r3, #12]
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	ea40 0301 	orr.w	r3, r0, r1
 8003fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fec:	f021 010c 	bic.w	r1, r1, #12
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400e:	6999      	ldr	r1, [r3, #24]
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	ea40 0301 	orr.w	r3, r0, r1
 800401a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b8f      	ldr	r3, [pc, #572]	; (8004260 <UART_SetConfig+0x2cc>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d005      	beq.n	8004034 <UART_SetConfig+0xa0>
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b8d      	ldr	r3, [pc, #564]	; (8004264 <UART_SetConfig+0x2d0>)
 8004030:	429a      	cmp	r2, r3
 8004032:	d104      	bne.n	800403e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe fa48 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8004038:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800403c:	e003      	b.n	8004046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800403e:	f7fe fa2f 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8004042:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	f040 810c 	bne.w	800426c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004058:	2200      	movs	r2, #0
 800405a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800405e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004066:	4622      	mov	r2, r4
 8004068:	462b      	mov	r3, r5
 800406a:	1891      	adds	r1, r2, r2
 800406c:	65b9      	str	r1, [r7, #88]	; 0x58
 800406e:	415b      	adcs	r3, r3
 8004070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004076:	4621      	mov	r1, r4
 8004078:	eb12 0801 	adds.w	r8, r2, r1
 800407c:	4629      	mov	r1, r5
 800407e:	eb43 0901 	adc.w	r9, r3, r1
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800408e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004096:	4690      	mov	r8, r2
 8004098:	4699      	mov	r9, r3
 800409a:	4623      	mov	r3, r4
 800409c:	eb18 0303 	adds.w	r3, r8, r3
 80040a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040a4:	462b      	mov	r3, r5
 80040a6:	eb49 0303 	adc.w	r3, r9, r3
 80040aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040c2:	460b      	mov	r3, r1
 80040c4:	18db      	adds	r3, r3, r3
 80040c6:	653b      	str	r3, [r7, #80]	; 0x50
 80040c8:	4613      	mov	r3, r2
 80040ca:	eb42 0303 	adc.w	r3, r2, r3
 80040ce:	657b      	str	r3, [r7, #84]	; 0x54
 80040d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040d8:	f7fc f87e 	bl	80001d8 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b61      	ldr	r3, [pc, #388]	; (8004268 <UART_SetConfig+0x2d4>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011c      	lsls	r4, r3, #4
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	64b9      	str	r1, [r7, #72]	; 0x48
 8004104:	415b      	adcs	r3, r3
 8004106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800410c:	4641      	mov	r1, r8
 800410e:	eb12 0a01 	adds.w	sl, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb43 0b01 	adc.w	fp, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800412c:	4692      	mov	sl, r2
 800412e:	469b      	mov	fp, r3
 8004130:	4643      	mov	r3, r8
 8004132:	eb1a 0303 	adds.w	r3, sl, r3
 8004136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800413a:	464b      	mov	r3, r9
 800413c:	eb4b 0303 	adc.w	r3, fp, r3
 8004140:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004150:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004158:	460b      	mov	r3, r1
 800415a:	18db      	adds	r3, r3, r3
 800415c:	643b      	str	r3, [r7, #64]	; 0x40
 800415e:	4613      	mov	r3, r2
 8004160:	eb42 0303 	adc.w	r3, r2, r3
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
 8004166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800416a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800416e:	f7fc f833 	bl	80001d8 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4611      	mov	r1, r2
 8004178:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <UART_SetConfig+0x2d4>)
 800417a:	fba3 2301 	umull	r2, r3, r3, r1
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2264      	movs	r2, #100	; 0x64
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	1acb      	subs	r3, r1, r3
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800418e:	4b36      	ldr	r3, [pc, #216]	; (8004268 <UART_SetConfig+0x2d4>)
 8004190:	fba3 2302 	umull	r2, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800419c:	441c      	add	r4, r3
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041b8:	415b      	adcs	r3, r3
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041c0:	4641      	mov	r1, r8
 80041c2:	1851      	adds	r1, r2, r1
 80041c4:	6339      	str	r1, [r7, #48]	; 0x30
 80041c6:	4649      	mov	r1, r9
 80041c8:	414b      	adcs	r3, r1
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041d8:	4659      	mov	r1, fp
 80041da:	00cb      	lsls	r3, r1, #3
 80041dc:	4651      	mov	r1, sl
 80041de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e2:	4651      	mov	r1, sl
 80041e4:	00ca      	lsls	r2, r1, #3
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	4642      	mov	r2, r8
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041f4:	464b      	mov	r3, r9
 80041f6:	460a      	mov	r2, r1
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800420c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004214:	460b      	mov	r3, r1
 8004216:	18db      	adds	r3, r3, r3
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
 800421a:	4613      	mov	r3, r2
 800421c:	eb42 0303 	adc.w	r3, r2, r3
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800422a:	f7fb ffd5 	bl	80001d8 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <UART_SetConfig+0x2d4>)
 8004234:	fba3 1302 	umull	r1, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	2164      	movs	r1, #100	; 0x64
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	3332      	adds	r3, #50	; 0x32
 8004246:	4a08      	ldr	r2, [pc, #32]	; (8004268 <UART_SetConfig+0x2d4>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	f003 0207 	and.w	r2, r3, #7
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4422      	add	r2, r4
 800425a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800425c:	e105      	b.n	800446a <UART_SetConfig+0x4d6>
 800425e:	bf00      	nop
 8004260:	40011000 	.word	0x40011000
 8004264:	40011400 	.word	0x40011400
 8004268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800426c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004270:	2200      	movs	r2, #0
 8004272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004276:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800427a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800427e:	4642      	mov	r2, r8
 8004280:	464b      	mov	r3, r9
 8004282:	1891      	adds	r1, r2, r2
 8004284:	6239      	str	r1, [r7, #32]
 8004286:	415b      	adcs	r3, r3
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800428e:	4641      	mov	r1, r8
 8004290:	1854      	adds	r4, r2, r1
 8004292:	4649      	mov	r1, r9
 8004294:	eb43 0501 	adc.w	r5, r3, r1
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	00eb      	lsls	r3, r5, #3
 80042a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a6:	00e2      	lsls	r2, r4, #3
 80042a8:	4614      	mov	r4, r2
 80042aa:	461d      	mov	r5, r3
 80042ac:	4643      	mov	r3, r8
 80042ae:	18e3      	adds	r3, r4, r3
 80042b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042b4:	464b      	mov	r3, r9
 80042b6:	eb45 0303 	adc.w	r3, r5, r3
 80042ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042da:	4629      	mov	r1, r5
 80042dc:	008b      	lsls	r3, r1, #2
 80042de:	4621      	mov	r1, r4
 80042e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e4:	4621      	mov	r1, r4
 80042e6:	008a      	lsls	r2, r1, #2
 80042e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042ec:	f7fb ff74 	bl	80001d8 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4b60      	ldr	r3, [pc, #384]	; (8004478 <UART_SetConfig+0x4e4>)
 80042f6:	fba3 2302 	umull	r2, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	011c      	lsls	r4, r3, #4
 80042fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004308:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800430c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004310:	4642      	mov	r2, r8
 8004312:	464b      	mov	r3, r9
 8004314:	1891      	adds	r1, r2, r2
 8004316:	61b9      	str	r1, [r7, #24]
 8004318:	415b      	adcs	r3, r3
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004320:	4641      	mov	r1, r8
 8004322:	1851      	adds	r1, r2, r1
 8004324:	6139      	str	r1, [r7, #16]
 8004326:	4649      	mov	r1, r9
 8004328:	414b      	adcs	r3, r1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004338:	4659      	mov	r1, fp
 800433a:	00cb      	lsls	r3, r1, #3
 800433c:	4651      	mov	r1, sl
 800433e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004342:	4651      	mov	r1, sl
 8004344:	00ca      	lsls	r2, r1, #3
 8004346:	4610      	mov	r0, r2
 8004348:	4619      	mov	r1, r3
 800434a:	4603      	mov	r3, r0
 800434c:	4642      	mov	r2, r8
 800434e:	189b      	adds	r3, r3, r2
 8004350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004354:	464b      	mov	r3, r9
 8004356:	460a      	mov	r2, r1
 8004358:	eb42 0303 	adc.w	r3, r2, r3
 800435c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	67bb      	str	r3, [r7, #120]	; 0x78
 800436a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004378:	4649      	mov	r1, r9
 800437a:	008b      	lsls	r3, r1, #2
 800437c:	4641      	mov	r1, r8
 800437e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004382:	4641      	mov	r1, r8
 8004384:	008a      	lsls	r2, r1, #2
 8004386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800438a:	f7fb ff25 	bl	80001d8 <__aeabi_uldivmod>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4b39      	ldr	r3, [pc, #228]	; (8004478 <UART_SetConfig+0x4e4>)
 8004394:	fba3 1302 	umull	r1, r3, r3, r2
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	2164      	movs	r1, #100	; 0x64
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	3332      	adds	r3, #50	; 0x32
 80043a6:	4a34      	ldr	r2, [pc, #208]	; (8004478 <UART_SetConfig+0x4e4>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b2:	441c      	add	r4, r3
 80043b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b8:	2200      	movs	r2, #0
 80043ba:	673b      	str	r3, [r7, #112]	; 0x70
 80043bc:	677a      	str	r2, [r7, #116]	; 0x74
 80043be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043c2:	4642      	mov	r2, r8
 80043c4:	464b      	mov	r3, r9
 80043c6:	1891      	adds	r1, r2, r2
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	415b      	adcs	r3, r3
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d2:	4641      	mov	r1, r8
 80043d4:	1851      	adds	r1, r2, r1
 80043d6:	6039      	str	r1, [r7, #0]
 80043d8:	4649      	mov	r1, r9
 80043da:	414b      	adcs	r3, r1
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043ea:	4659      	mov	r1, fp
 80043ec:	00cb      	lsls	r3, r1, #3
 80043ee:	4651      	mov	r1, sl
 80043f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f4:	4651      	mov	r1, sl
 80043f6:	00ca      	lsls	r2, r1, #3
 80043f8:	4610      	mov	r0, r2
 80043fa:	4619      	mov	r1, r3
 80043fc:	4603      	mov	r3, r0
 80043fe:	4642      	mov	r2, r8
 8004400:	189b      	adds	r3, r3, r2
 8004402:	66bb      	str	r3, [r7, #104]	; 0x68
 8004404:	464b      	mov	r3, r9
 8004406:	460a      	mov	r2, r1
 8004408:	eb42 0303 	adc.w	r3, r2, r3
 800440c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	663b      	str	r3, [r7, #96]	; 0x60
 8004418:	667a      	str	r2, [r7, #100]	; 0x64
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004426:	4649      	mov	r1, r9
 8004428:	008b      	lsls	r3, r1, #2
 800442a:	4641      	mov	r1, r8
 800442c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004430:	4641      	mov	r1, r8
 8004432:	008a      	lsls	r2, r1, #2
 8004434:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004438:	f7fb fece 	bl	80001d8 <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <UART_SetConfig+0x4e4>)
 8004442:	fba3 1302 	umull	r1, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2164      	movs	r1, #100	; 0x64
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	3332      	adds	r3, #50	; 0x32
 8004454:	4a08      	ldr	r2, [pc, #32]	; (8004478 <UART_SetConfig+0x4e4>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 020f 	and.w	r2, r3, #15
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4422      	add	r2, r4
 8004468:	609a      	str	r2, [r3, #8]
}
 800446a:	bf00      	nop
 800446c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004470:	46bd      	mov	sp, r7
 8004472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004476:	bf00      	nop
 8004478:	51eb851f 	.word	0x51eb851f

0800447c <__libc_init_array>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	4d0d      	ldr	r5, [pc, #52]	; (80044b4 <__libc_init_array+0x38>)
 8004480:	4c0d      	ldr	r4, [pc, #52]	; (80044b8 <__libc_init_array+0x3c>)
 8004482:	1b64      	subs	r4, r4, r5
 8004484:	10a4      	asrs	r4, r4, #2
 8004486:	2600      	movs	r6, #0
 8004488:	42a6      	cmp	r6, r4
 800448a:	d109      	bne.n	80044a0 <__libc_init_array+0x24>
 800448c:	4d0b      	ldr	r5, [pc, #44]	; (80044bc <__libc_init_array+0x40>)
 800448e:	4c0c      	ldr	r4, [pc, #48]	; (80044c0 <__libc_init_array+0x44>)
 8004490:	f000 f820 	bl	80044d4 <_init>
 8004494:	1b64      	subs	r4, r4, r5
 8004496:	10a4      	asrs	r4, r4, #2
 8004498:	2600      	movs	r6, #0
 800449a:	42a6      	cmp	r6, r4
 800449c:	d105      	bne.n	80044aa <__libc_init_array+0x2e>
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a4:	4798      	blx	r3
 80044a6:	3601      	adds	r6, #1
 80044a8:	e7ee      	b.n	8004488 <__libc_init_array+0xc>
 80044aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ae:	4798      	blx	r3
 80044b0:	3601      	adds	r6, #1
 80044b2:	e7f2      	b.n	800449a <__libc_init_array+0x1e>
 80044b4:	0800461c 	.word	0x0800461c
 80044b8:	0800461c 	.word	0x0800461c
 80044bc:	0800461c 	.word	0x0800461c
 80044c0:	08004620 	.word	0x08004620

080044c4 <memset>:
 80044c4:	4402      	add	r2, r0
 80044c6:	4603      	mov	r3, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
