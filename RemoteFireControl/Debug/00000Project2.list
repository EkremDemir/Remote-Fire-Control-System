
00000Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004268  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004550  08004550  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004558  08004558  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000194  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1f4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000202a  00000000  00000000  0002f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00031260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00031f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a65  00000000  00000000  00032b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa05  00000000  00000000  0005456d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cafbf  00000000  00000000  00063f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ef31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003518  00000000  00000000  0012ef84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043d8 	.word	0x080043d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080043d8 	.word	0x080043d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ESP_Init>:

extern uint8_t rcvd_byte;
extern uint8_t receive[100];

void ESP_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	/***********RESETTING**************************************************/

	clearBuf();
 80004d0:	f000 f88c 	bl	80005ec <clearBuf>
	HAL_UART_Transmit(&huart2,(uint8_t*) "AT+RST\r\n", 8, 5);
 80004d4:	2305      	movs	r3, #5
 80004d6:	2208      	movs	r2, #8
 80004d8:	4932      	ldr	r1, [pc, #200]	; (80005a4 <ESP_Init+0xd8>)
 80004da:	4833      	ldr	r0, [pc, #204]	; (80005a8 <ESP_Init+0xdc>)
 80004dc:	f002 fe6e 	bl	80031bc <HAL_UART_Transmit>
	HAL_Delay(1500);
 80004e0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80004e4:	f000 ff36 	bl	8001354 <HAL_Delay>

	/**************************CHECK it is run or not**************************************************/
	do{
	    clearBuf();
 80004e8:	f000 f880 	bl	80005ec <clearBuf>
	    HAL_UART_Transmit(&huart2,(uint8_t*) "AT\r\n",4, 5);
 80004ec:	2305      	movs	r3, #5
 80004ee:	2204      	movs	r2, #4
 80004f0:	492e      	ldr	r1, [pc, #184]	; (80005ac <ESP_Init+0xe0>)
 80004f2:	482d      	ldr	r0, [pc, #180]	; (80005a8 <ESP_Init+0xdc>)
 80004f4:	f002 fe62 	bl	80031bc <HAL_UART_Transmit>
	    HAL_UART_Receive(&huart2, receive, 20, 5);
 80004f8:	2305      	movs	r3, #5
 80004fa:	2214      	movs	r2, #20
 80004fc:	492c      	ldr	r1, [pc, #176]	; (80005b0 <ESP_Init+0xe4>)
 80004fe:	482a      	ldr	r0, [pc, #168]	; (80005a8 <ESP_Init+0xdc>)
 8000500:	f002 feee 	bl	80032e0 <HAL_UART_Receive>
    }while(!containsString((char*)receive,"OK"));
 8000504:	492b      	ldr	r1, [pc, #172]	; (80005b4 <ESP_Init+0xe8>)
 8000506:	482a      	ldr	r0, [pc, #168]	; (80005b0 <ESP_Init+0xe4>)
 8000508:	f000 f88a 	bl	8000620 <containsString>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0ea      	beq.n	80004e8 <ESP_Init+0x1c>

	/**************************Set ESP as client mode**************************************************/
	do{
		clearBuf();
 8000512:	f000 f86b 	bl	80005ec <clearBuf>
	    HAL_UART_Transmit(&huart2,(uint8_t*) "AT+CWMODE=3\r\n",13, 5);
 8000516:	2305      	movs	r3, #5
 8000518:	220d      	movs	r2, #13
 800051a:	4927      	ldr	r1, [pc, #156]	; (80005b8 <ESP_Init+0xec>)
 800051c:	4822      	ldr	r0, [pc, #136]	; (80005a8 <ESP_Init+0xdc>)
 800051e:	f002 fe4d 	bl	80031bc <HAL_UART_Transmit>
	    HAL_UART_Receive(&huart2, receive, 30, 5);
 8000522:	2305      	movs	r3, #5
 8000524:	221e      	movs	r2, #30
 8000526:	4922      	ldr	r1, [pc, #136]	; (80005b0 <ESP_Init+0xe4>)
 8000528:	481f      	ldr	r0, [pc, #124]	; (80005a8 <ESP_Init+0xdc>)
 800052a:	f002 fed9 	bl	80032e0 <HAL_UART_Receive>
     }while(!containsString((char*)receive,"OK"));
 800052e:	4921      	ldr	r1, [pc, #132]	; (80005b4 <ESP_Init+0xe8>)
 8000530:	481f      	ldr	r0, [pc, #124]	; (80005b0 <ESP_Init+0xe4>)
 8000532:	f000 f875 	bl	8000620 <containsString>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0ea      	beq.n	8000512 <ESP_Init+0x46>

	/**************************Enable Multiple Connection**************************************************/
	do{
		clearBuf();
 800053c:	f000 f856 	bl	80005ec <clearBuf>
	    HAL_UART_Transmit(&huart2,(uint8_t*) "AT+CIPMUX=1\r\n",13, 5);
 8000540:	2305      	movs	r3, #5
 8000542:	220d      	movs	r2, #13
 8000544:	491d      	ldr	r1, [pc, #116]	; (80005bc <ESP_Init+0xf0>)
 8000546:	4818      	ldr	r0, [pc, #96]	; (80005a8 <ESP_Init+0xdc>)
 8000548:	f002 fe38 	bl	80031bc <HAL_UART_Transmit>
	    HAL_UART_Receive(&huart2, receive, 30, 5);
 800054c:	2305      	movs	r3, #5
 800054e:	221e      	movs	r2, #30
 8000550:	4917      	ldr	r1, [pc, #92]	; (80005b0 <ESP_Init+0xe4>)
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <ESP_Init+0xdc>)
 8000554:	f002 fec4 	bl	80032e0 <HAL_UART_Receive>
	}while(!containsString((char*)receive,"OK"));
 8000558:	4916      	ldr	r1, [pc, #88]	; (80005b4 <ESP_Init+0xe8>)
 800055a:	4815      	ldr	r0, [pc, #84]	; (80005b0 <ESP_Init+0xe4>)
 800055c:	f000 f860 	bl	8000620 <containsString>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0ea      	beq.n	800053c <ESP_Init+0x70>


	/**************************Enable Multiple Connection**************************************************/
	do{
		clearBuf();
 8000566:	f000 f841 	bl	80005ec <clearBuf>
		HAL_UART_Transmit(&huart2,(uint8_t*) "AT+CIPSTART=1,\"TCP\",\"192.168.79.168\",80\r\n",42, 100);
 800056a:	2364      	movs	r3, #100	; 0x64
 800056c:	222a      	movs	r2, #42	; 0x2a
 800056e:	4914      	ldr	r1, [pc, #80]	; (80005c0 <ESP_Init+0xf4>)
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <ESP_Init+0xdc>)
 8000572:	f002 fe23 	bl	80031bc <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, receive, 100, 100);
 8000576:	2364      	movs	r3, #100	; 0x64
 8000578:	2264      	movs	r2, #100	; 0x64
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <ESP_Init+0xe4>)
 800057c:	480a      	ldr	r0, [pc, #40]	; (80005a8 <ESP_Init+0xdc>)
 800057e:	f002 feaf 	bl	80032e0 <HAL_UART_Receive>
	}
	while(!containsString((char*)receive,"OK"));
 8000582:	490c      	ldr	r1, [pc, #48]	; (80005b4 <ESP_Init+0xe8>)
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <ESP_Init+0xe4>)
 8000586:	f000 f84b 	bl	8000620 <containsString>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0ea      	beq.n	8000566 <ESP_Init+0x9a>
	clearBuf();
 8000590:	f000 f82c 	bl	80005ec <clearBuf>
	HAL_UART_Receive_IT(&huart2, &rcvd_byte,1);
 8000594:	2201      	movs	r2, #1
 8000596:	490b      	ldr	r1, [pc, #44]	; (80005c4 <ESP_Init+0xf8>)
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <ESP_Init+0xdc>)
 800059a:	f002 ff43 	bl	8003424 <HAL_UART_Receive_IT>


}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	080043f0 	.word	0x080043f0
 80005a8:	20000028 	.word	0x20000028
 80005ac:	080043fc 	.word	0x080043fc
 80005b0:	20000138 	.word	0x20000138
 80005b4:	08004404 	.word	0x08004404
 80005b8:	08004408 	.word	0x08004408
 80005bc:	08004418 	.word	0x08004418
 80005c0:	08004428 	.word	0x08004428
 80005c4:	20000134 	.word	0x20000134

080005c8 <ESP_Server_Start>:


void ESP_Server_Start(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
    while(!containsString((char*)receive,"IPD"));
 80005cc:	bf00      	nop
 80005ce:	4905      	ldr	r1, [pc, #20]	; (80005e4 <ESP_Server_Start+0x1c>)
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <ESP_Server_Start+0x20>)
 80005d2:	f000 f825 	bl	8000620 <containsString>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0f8      	beq.n	80005ce <ESP_Server_Start+0x6>
    conditions();
 80005dc:	f000 f834 	bl	8000648 <conditions>

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	08004454 	.word	0x08004454
 80005e8:	20000138 	.word	0x20000138

080005ec <clearBuf>:


void clearBuf(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; ++i)
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	e007      	b.n	8000608 <clearBuf+0x1c>
	{
		receive[i] = 0;
 80005f8:	4a08      	ldr	r2, [pc, #32]	; (800061c <clearBuf+0x30>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 100; ++i)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	3301      	adds	r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b63      	cmp	r3, #99	; 0x63
 800060c:	ddf4      	ble.n	80005f8 <clearBuf+0xc>
	}
}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20000138 	.word	0x20000138

08000620 <containsString>:


// Function to check if string1 contains string2
int containsString(const char *string1, const char *string2) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
    if (strstr(string1, string2) != NULL) {
 800062a:	6839      	ldr	r1, [r7, #0]
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f003 febd 	bl	80043ac <strstr>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <containsString+0x1c>
        return 1; // string1 contains string2
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <containsString+0x1e>
    } else {
        return 0; // string1 doesn't contain string2
 800063c:	2300      	movs	r3, #0
    }
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <conditions>:
void conditions(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

    if(containsString((char*)receive,"rightx")) //pan right
 800064c:	4976      	ldr	r1, [pc, #472]	; (8000828 <conditions+0x1e0>)
 800064e:	4877      	ldr	r0, [pc, #476]	; (800082c <conditions+0x1e4>)
 8000650:	f7ff ffe6 	bl	8000620 <containsString>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d009      	beq.n	800066e <conditions+0x26>
    {
        setDirection(&stepMotor1, 1);
 800065a:	2101      	movs	r1, #1
 800065c:	4874      	ldr	r0, [pc, #464]	; (8000830 <conditions+0x1e8>)
 800065e:	f000 fd1b 	bl	8001098 <setDirection>
        moveContinous(&stepMotor1);
 8000662:	4873      	ldr	r0, [pc, #460]	; (8000830 <conditions+0x1e8>)
 8000664:	f000 fd34 	bl	80010d0 <moveContinous>
        clearBuf();
 8000668:	f7ff ffc0 	bl	80005ec <clearBuf>
 800066c:	e0d8      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive,"leftx"))//pan left
 800066e:	4971      	ldr	r1, [pc, #452]	; (8000834 <conditions+0x1ec>)
 8000670:	486e      	ldr	r0, [pc, #440]	; (800082c <conditions+0x1e4>)
 8000672:	f7ff ffd5 	bl	8000620 <containsString>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d009      	beq.n	8000690 <conditions+0x48>
    {

    	setDirection(&stepMotor1, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	486c      	ldr	r0, [pc, #432]	; (8000830 <conditions+0x1e8>)
 8000680:	f000 fd0a 	bl	8001098 <setDirection>
    	moveContinous(&stepMotor1);
 8000684:	486a      	ldr	r0, [pc, #424]	; (8000830 <conditions+0x1e8>)
 8000686:	f000 fd23 	bl	80010d0 <moveContinous>
    	clearBuf();
 800068a:	f7ff ffaf 	bl	80005ec <clearBuf>
 800068e:	e0c7      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "downx"))//tilt below
 8000690:	4969      	ldr	r1, [pc, #420]	; (8000838 <conditions+0x1f0>)
 8000692:	4866      	ldr	r0, [pc, #408]	; (800082c <conditions+0x1e4>)
 8000694:	f7ff ffc4 	bl	8000620 <containsString>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d009      	beq.n	80006b2 <conditions+0x6a>
    {
    	setDirection(&stepMotor2, 0);
 800069e:	2100      	movs	r1, #0
 80006a0:	4866      	ldr	r0, [pc, #408]	; (800083c <conditions+0x1f4>)
 80006a2:	f000 fcf9 	bl	8001098 <setDirection>
    	moveContinous(&stepMotor2);
 80006a6:	4865      	ldr	r0, [pc, #404]	; (800083c <conditions+0x1f4>)
 80006a8:	f000 fd12 	bl	80010d0 <moveContinous>
    	clearBuf();
 80006ac:	f7ff ff9e 	bl	80005ec <clearBuf>
 80006b0:	e0b6      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "upx"))//tilt up
 80006b2:	4963      	ldr	r1, [pc, #396]	; (8000840 <conditions+0x1f8>)
 80006b4:	485d      	ldr	r0, [pc, #372]	; (800082c <conditions+0x1e4>)
 80006b6:	f7ff ffb3 	bl	8000620 <containsString>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d009      	beq.n	80006d4 <conditions+0x8c>
    {
    	setDirection(&stepMotor2, 1);
 80006c0:	2101      	movs	r1, #1
 80006c2:	485e      	ldr	r0, [pc, #376]	; (800083c <conditions+0x1f4>)
 80006c4:	f000 fce8 	bl	8001098 <setDirection>
    	moveContinous(&stepMotor2);
 80006c8:	485c      	ldr	r0, [pc, #368]	; (800083c <conditions+0x1f4>)
 80006ca:	f000 fd01 	bl	80010d0 <moveContinous>
    	clearBuf();
 80006ce:	f7ff ff8d 	bl	80005ec <clearBuf>
 80006d2:	e0a5      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "rightup"))//pan tilt right up
 80006d4:	495b      	ldr	r1, [pc, #364]	; (8000844 <conditions+0x1fc>)
 80006d6:	4855      	ldr	r0, [pc, #340]	; (800082c <conditions+0x1e4>)
 80006d8:	f7ff ffa2 	bl	8000620 <containsString>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d00e      	beq.n	8000700 <conditions+0xb8>
    {
    	setDirection(&stepMotor1, 1);
 80006e2:	2101      	movs	r1, #1
 80006e4:	4852      	ldr	r0, [pc, #328]	; (8000830 <conditions+0x1e8>)
 80006e6:	f000 fcd7 	bl	8001098 <setDirection>
    	setDirection(&stepMotor2, 1);
 80006ea:	2101      	movs	r1, #1
 80006ec:	4853      	ldr	r0, [pc, #332]	; (800083c <conditions+0x1f4>)
 80006ee:	f000 fcd3 	bl	8001098 <setDirection>
    	moveTwoMotorContinous(&stepMotor2, &stepMotor1);
 80006f2:	494f      	ldr	r1, [pc, #316]	; (8000830 <conditions+0x1e8>)
 80006f4:	4851      	ldr	r0, [pc, #324]	; (800083c <conditions+0x1f4>)
 80006f6:	f000 fd1b 	bl	8001130 <moveTwoMotorContinous>
    	clearBuf();
 80006fa:	f7ff ff77 	bl	80005ec <clearBuf>
 80006fe:	e08f      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "leftup"))//pan tilt left up
 8000700:	4951      	ldr	r1, [pc, #324]	; (8000848 <conditions+0x200>)
 8000702:	484a      	ldr	r0, [pc, #296]	; (800082c <conditions+0x1e4>)
 8000704:	f7ff ff8c 	bl	8000620 <containsString>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00e      	beq.n	800072c <conditions+0xe4>
    {
    	setDirection(&stepMotor1, 0);
 800070e:	2100      	movs	r1, #0
 8000710:	4847      	ldr	r0, [pc, #284]	; (8000830 <conditions+0x1e8>)
 8000712:	f000 fcc1 	bl	8001098 <setDirection>
    	setDirection(&stepMotor2, 1);
 8000716:	2101      	movs	r1, #1
 8000718:	4848      	ldr	r0, [pc, #288]	; (800083c <conditions+0x1f4>)
 800071a:	f000 fcbd 	bl	8001098 <setDirection>
    	moveTwoMotorContinous(&stepMotor2, &stepMotor1);
 800071e:	4944      	ldr	r1, [pc, #272]	; (8000830 <conditions+0x1e8>)
 8000720:	4846      	ldr	r0, [pc, #280]	; (800083c <conditions+0x1f4>)
 8000722:	f000 fd05 	bl	8001130 <moveTwoMotorContinous>
    	clearBuf();
 8000726:	f7ff ff61 	bl	80005ec <clearBuf>
 800072a:	e079      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "rightdown"))
 800072c:	4947      	ldr	r1, [pc, #284]	; (800084c <conditions+0x204>)
 800072e:	483f      	ldr	r0, [pc, #252]	; (800082c <conditions+0x1e4>)
 8000730:	f7ff ff76 	bl	8000620 <containsString>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00e      	beq.n	8000758 <conditions+0x110>
    {
    	setDirection(&stepMotor1, 1);
 800073a:	2101      	movs	r1, #1
 800073c:	483c      	ldr	r0, [pc, #240]	; (8000830 <conditions+0x1e8>)
 800073e:	f000 fcab 	bl	8001098 <setDirection>
    	setDirection(&stepMotor2, 0);
 8000742:	2100      	movs	r1, #0
 8000744:	483d      	ldr	r0, [pc, #244]	; (800083c <conditions+0x1f4>)
 8000746:	f000 fca7 	bl	8001098 <setDirection>
    	moveTwoMotorContinous(&stepMotor2, &stepMotor1);
 800074a:	4939      	ldr	r1, [pc, #228]	; (8000830 <conditions+0x1e8>)
 800074c:	483b      	ldr	r0, [pc, #236]	; (800083c <conditions+0x1f4>)
 800074e:	f000 fcef 	bl	8001130 <moveTwoMotorContinous>
    	clearBuf();
 8000752:	f7ff ff4b 	bl	80005ec <clearBuf>
 8000756:	e063      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "leftdown"))
 8000758:	493d      	ldr	r1, [pc, #244]	; (8000850 <conditions+0x208>)
 800075a:	4834      	ldr	r0, [pc, #208]	; (800082c <conditions+0x1e4>)
 800075c:	f7ff ff60 	bl	8000620 <containsString>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00e      	beq.n	8000784 <conditions+0x13c>
    {
    	setDirection(&stepMotor1, 1);
 8000766:	2101      	movs	r1, #1
 8000768:	4831      	ldr	r0, [pc, #196]	; (8000830 <conditions+0x1e8>)
 800076a:	f000 fc95 	bl	8001098 <setDirection>
    	setDirection(&stepMotor2, 0);
 800076e:	2100      	movs	r1, #0
 8000770:	4832      	ldr	r0, [pc, #200]	; (800083c <conditions+0x1f4>)
 8000772:	f000 fc91 	bl	8001098 <setDirection>
    	moveTwoMotorContinous(&stepMotor2, &stepMotor1);
 8000776:	492e      	ldr	r1, [pc, #184]	; (8000830 <conditions+0x1e8>)
 8000778:	4830      	ldr	r0, [pc, #192]	; (800083c <conditions+0x1f4>)
 800077a:	f000 fcd9 	bl	8001130 <moveTwoMotorContinous>
    	clearBuf();
 800077e:	f7ff ff35 	bl	80005ec <clearBuf>
 8000782:	e04d      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "autofire"))
 8000784:	4933      	ldr	r1, [pc, #204]	; (8000854 <conditions+0x20c>)
 8000786:	4829      	ldr	r0, [pc, #164]	; (800082c <conditions+0x1e4>)
 8000788:	f7ff ff4a 	bl	8000620 <containsString>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d146      	bne.n	8000820 <conditions+0x1d8>
    {
    	//StartDcMotor();
    }
    else if(containsString((char*)receive, "singlefire"))
 8000792:	4931      	ldr	r1, [pc, #196]	; (8000858 <conditions+0x210>)
 8000794:	4825      	ldr	r0, [pc, #148]	; (800082c <conditions+0x1e4>)
 8000796:	f7ff ff43 	bl	8000620 <containsString>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <conditions+0x162>
    {
    	StartDcMotor();
 80007a0:	f000 f89a 	bl	80008d8 <StartDcMotor>
    	clearBuf();
 80007a4:	f7ff ff22 	bl	80005ec <clearBuf>
 80007a8:	e03a      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "fireon"))
 80007aa:	492c      	ldr	r1, [pc, #176]	; (800085c <conditions+0x214>)
 80007ac:	481f      	ldr	r0, [pc, #124]	; (800082c <conditions+0x1e4>)
 80007ae:	f7ff ff37 	bl	8000620 <containsString>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d004      	beq.n	80007c2 <conditions+0x17a>
    {
    	StartDcMotor();
 80007b8:	f000 f88e 	bl	80008d8 <StartDcMotor>
    	clearBuf();
 80007bc:	f7ff ff16 	bl	80005ec <clearBuf>
 80007c0:	e02e      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "high"))
 80007c2:	4927      	ldr	r1, [pc, #156]	; (8000860 <conditions+0x218>)
 80007c4:	4819      	ldr	r0, [pc, #100]	; (800082c <conditions+0x1e4>)
 80007c6:	f7ff ff2b 	bl	8000620 <containsString>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <conditions+0x194>
    {
    	SetDcMotorSpeed(99);
 80007d0:	2063      	movs	r0, #99	; 0x63
 80007d2:	f000 f85f 	bl	8000894 <SetDcMotorSpeed>
    	clearBuf();
 80007d6:	f7ff ff09 	bl	80005ec <clearBuf>
 80007da:	e021      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "medium"))
 80007dc:	4921      	ldr	r1, [pc, #132]	; (8000864 <conditions+0x21c>)
 80007de:	4813      	ldr	r0, [pc, #76]	; (800082c <conditions+0x1e4>)
 80007e0:	f7ff ff1e 	bl	8000620 <containsString>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d005      	beq.n	80007f6 <conditions+0x1ae>
    {
    	SetDcMotorSpeed(66);
 80007ea:	2042      	movs	r0, #66	; 0x42
 80007ec:	f000 f852 	bl	8000894 <SetDcMotorSpeed>
    	clearBuf();
 80007f0:	f7ff fefc 	bl	80005ec <clearBuf>
 80007f4:	e014      	b.n	8000820 <conditions+0x1d8>
    }
    else if(containsString((char*)receive, "low"))
 80007f6:	491c      	ldr	r1, [pc, #112]	; (8000868 <conditions+0x220>)
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <conditions+0x1e4>)
 80007fa:	f7ff ff11 	bl	8000620 <containsString>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <conditions+0x1c8>
    {
    	SetDcMotorSpeed(33);
 8000804:	2021      	movs	r0, #33	; 0x21
 8000806:	f000 f845 	bl	8000894 <SetDcMotorSpeed>
    	clearBuf();
 800080a:	f7ff feef 	bl	80005ec <clearBuf>
 800080e:	e007      	b.n	8000820 <conditions+0x1d8>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000816:	4815      	ldr	r0, [pc, #84]	; (800086c <conditions+0x224>)
 8000818:	f001 f93e 	bl	8001a98 <HAL_GPIO_WritePin>
        clearBuf();
 800081c:	f7ff fee6 	bl	80005ec <clearBuf>
    }
    clearBuf();
 8000820:	f7ff fee4 	bl	80005ec <clearBuf>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08004458 	.word	0x08004458
 800082c:	20000138 	.word	0x20000138
 8000830:	200000fc 	.word	0x200000fc
 8000834:	08004460 	.word	0x08004460
 8000838:	08004468 	.word	0x08004468
 800083c:	20000118 	.word	0x20000118
 8000840:	08004470 	.word	0x08004470
 8000844:	08004474 	.word	0x08004474
 8000848:	0800447c 	.word	0x0800447c
 800084c:	08004484 	.word	0x08004484
 8000850:	08004490 	.word	0x08004490
 8000854:	0800449c 	.word	0x0800449c
 8000858:	080044a8 	.word	0x080044a8
 800085c:	080044b4 	.word	0x080044b4
 8000860:	080044bc 	.word	0x080044bc
 8000864:	080044c4 	.word	0x080044c4
 8000868:	080044cc 	.word	0x080044cc
 800086c:	40020c00 	.word	0x40020c00

08000870 <StopDcMotor>:
#include "dcMotor.h"

extern TIM_HandleTypeDef htim2;

void StopDcMotor(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <StopDcMotor+0x20>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <StopDcMotor+0x20>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2200      	movs	r2, #0
 8000882:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	200000b4 	.word	0x200000b4

08000894 <SetDcMotorSpeed>:

void SetDcMotorSpeed(uint16_t speed)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	if(speed >  100)
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	2b64      	cmp	r3, #100	; 0x64
 80008a2:	d901      	bls.n	80008a8 <SetDcMotorSpeed+0x14>
	{
		speed = 100;
 80008a4:	2364      	movs	r3, #100	; 0x64
 80008a6:	80fb      	strh	r3, [r7, #6]
	if(speed < 0)
	{
		speed = 0;
	}

	speed = speed * 500;
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	461a      	mov	r2, r3
 80008ac:	0152      	lsls	r2, r2, #5
 80008ae:	1ad2      	subs	r2, r2, r3
 80008b0:	0092      	lsls	r2, r2, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,speed);
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <SetDcMotorSpeed+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	88fa      	ldrh	r2, [r7, #6]
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,speed);
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <SetDcMotorSpeed+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	88fa      	ldrh	r2, [r7, #6]
 80008c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	200000b4 	.word	0x200000b4

080008d8 <StartDcMotor>:


void StartDcMotor(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008dc:	2100      	movs	r1, #0
 80008de:	4807      	ldr	r0, [pc, #28]	; (80008fc <StartDcMotor+0x24>)
 80008e0:	f001 fed2 	bl	8002688 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,25000);
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <StartDcMotor+0x24>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,25000);
 80008ee:	4b03      	ldr	r3, [pc, #12]	; (80008fc <StartDcMotor+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000b4 	.word	0x200000b4

08000900 <SysTick_Handler>:

extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim2;
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000904:	f000 fd06 	bl	8001314 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000908:	f000 fe8b 	bl	8001622 <HAL_SYSTICK_IRQHandler>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <USART2_IRQHandler+0x10>)
 8000916:	f002 fdb5 	bl	8003484 <HAL_UART_IRQHandler>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000028 	.word	0x20000028

08000924 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <TIM2_IRQHandler+0x10>)
 800092a:	f001 ff75 	bl	8002818 <HAL_TIM_IRQHandler>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000b4 	.word	0x200000b4

08000938 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)   // This function handles EXTI line 15_10 interrupts.
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15 | GPIO_PIN_14);
 800093c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8000940:	f001 f8c4 	bl	8001acc <HAL_GPIO_EXTI_IRQHandler>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <main>:
void TIMER2_Init(void);
void Step_Motor_Init(void);
void Dc_Motor_Init();

int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	HAL_Init();
 800094c:	f000 fc90 	bl	8001270 <HAL_Init>
	SystemClock_Config();
 8000950:	f000 f81e 	bl	8000990 <SystemClock_Config>
	UART2_Init();
 8000954:	f000 f87a 	bl	8000a4c <UART2_Init>
	GPIO_Init();
 8000958:	f000 f8e8 	bl	8000b2c <GPIO_Init>
    TIMER6_Init();
 800095c:	f000 f89c 	bl	8000a98 <TIMER6_Init>
    TIMER2_Init();
 8000960:	f000 f8b6 	bl	8000ad0 <TIMER2_Init>

    // To disable the interrupt for limit switch
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000964:	2028      	movs	r0, #40	; 0x28
 8000966:	f000 fe42 	bl	80015ee <HAL_NVIC_DisableIRQ>

    //prevent uncontrolled interrupts
    TIM2->SR =  0; //
 800096a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
    TIM6->SR = 0;
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <main+0x44>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
	ESP_Init();
 8000978:	f7ff fda8 	bl	80004cc <ESP_Init>
    Step_Motor_Init();
 800097c:	f000 fa52 	bl	8000e24 <Step_Motor_Init>
    Dc_Motor_Init();
 8000980:	f000 fa76 	bl	8000e70 <Dc_Motor_Init>

	while(1)
	{
		ESP_Server_Start();
 8000984:	f7ff fe20 	bl	80005c8 <ESP_Server_Start>
 8000988:	e7fc      	b.n	8000984 <main+0x3c>
 800098a:	bf00      	nop
 800098c:	40001000 	.word	0x40001000

08000990 <SystemClock_Config>:
}


///////HSI 16MH
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b094      	sub	sp, #80	; 0x50
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	2230      	movs	r2, #48	; 0x30
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 fcfc 	bl	800439c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <SystemClock_Config+0xb4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	4a21      	ldr	r2, [pc, #132]	; (8000a44 <SystemClock_Config+0xb4>)
 80009be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <SystemClock_Config+0xb4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <SystemClock_Config+0xb8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <SystemClock_Config+0xb8>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <SystemClock_Config+0xb8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f4:	2310      	movs	r3, #16
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 f87b 	bl	8001afc <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a0c:	f000 fa4e 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fadd 	bl	8001fec <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a38:	f000 fa38 	bl	8000eac <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3750      	adds	r7, #80	; 0x50
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <UART2_Init>:


void UART2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <UART2_Init+0x44>)
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <UART2_Init+0x48>)
 8000a54:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <UART2_Init+0x44>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <UART2_Init+0x44>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits   = UART_STOPBITS_1;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <UART2_Init+0x44>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity     = UART_PARITY_NONE;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <UART2_Init+0x44>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <UART2_Init+0x44>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode       = UART_MODE_TX_RX;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <UART2_Init+0x44>)
 8000a78:	220c      	movs	r2, #12
 8000a7a:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <UART2_Init+0x44>)
 8000a7e:	f002 fb50 	bl	8003122 <HAL_UART_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <UART2_Init+0x40>
	{
		Error_Handler();
 8000a88:	f000 fa10 	bl	8000eac <Error_Handler>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000028 	.word	0x20000028
 8000a94:	40004400 	.word	0x40004400

08000a98 <TIMER6_Init>:


//Get one micro second
void TIMER6_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	//uint32_t pre =  HAL_RCC_GetHCLKFreq() /1000000;
	htim6.Instance = TIM6;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <TIMER6_Init+0x30>)
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <TIMER6_Init+0x34>)
 8000aa0:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 0;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <TIMER6_Init+0x30>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	605a      	str	r2, [r3, #4]
    htim6.Init.Period    = 16-1;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <TIMER6_Init+0x30>)
 8000aaa:	220f      	movs	r2, #15
 8000aac:	60da      	str	r2, [r3, #12]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <TIMER6_Init+0x30>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]

    if(HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <TIMER6_Init+0x30>)
 8000ab6:	f001 fcb9 	bl	800242c <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <TIMER6_Init+0x2c>
    {
    	Error_Handler();
 8000ac0:	f000 f9f4 	bl	8000eac <Error_Handler>
    }

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000006c 	.word	0x2000006c
 8000acc:	40001000 	.word	0x40001000

08000ad0 <TIMER2_Init>:

void TIMER2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef timPWM_init;

	htim2.Instance = TIM2;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <TIMER2_Init+0x58>)
 8000ad8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000adc:	601a      	str	r2, [r3, #0]
	htim2.Init.Period = 50000 - 1;
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <TIMER2_Init+0x58>)
 8000ae0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000ae4:	60da      	str	r2, [r3, #12]
	htim2.Init.Prescaler = 16 - 1;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <TIMER2_Init+0x58>)
 8000ae8:	220f      	movs	r2, #15
 8000aea:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aec:	480e      	ldr	r0, [pc, #56]	; (8000b28 <TIMER2_Init+0x58>)
 8000aee:	f001 fd7c 	bl	80025ea <HAL_TIM_PWM_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <TIMER2_Init+0x2c>
	{
		Error_Handler();
 8000af8:	f000 f9d8 	bl	8000eac <Error_Handler>
	}

	timPWM_init.OCMode = TIM_OCMODE_PWM1;
 8000afc:	2360      	movs	r3, #96	; 0x60
 8000afe:	607b      	str	r3, [r7, #4]
	timPWM_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]

	timPWM_init.Pulse   = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htim2, &timPWM_init, TIM_CHANNEL_1) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <TIMER2_Init+0x58>)
 8000b10:	f001 ff8a 	bl	8002a28 <HAL_TIM_PWM_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <TIMER2_Init+0x4e>
	{
		Error_Handler();
 8000b1a:	f000 f9c7 	bl	8000eac <Error_Handler>
	}

}
 8000b1e:	bf00      	nop
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000b4 	.word	0x200000b4

08000b2c <GPIO_Init>:

void GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b098      	sub	sp, #96	; 0x60
 8000b30:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b3e      	ldr	r3, [pc, #248]	; (8000c30 <GPIO_Init+0x104>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a3d      	ldr	r2, [pc, #244]	; (8000c30 <GPIO_Init+0x104>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b3b      	ldr	r3, [pc, #236]	; (8000c30 <GPIO_Init+0x104>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitTypeDef stepgpio;

	stepgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	653b      	str	r3, [r7, #80]	; 0x50
	stepgpio.Pin  = GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_8; //pin7 is for direction, pin9 is for step
 8000b52:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b56:	64fb      	str	r3, [r7, #76]	; 0x4c
	stepgpio.Speed = GPIO_SPEED_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	65bb      	str	r3, [r7, #88]	; 0x58
	stepgpio.Pull  = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	657b      	str	r3, [r7, #84]	; 0x54

	HAL_GPIO_Init(GPIOE,&stepgpio);
 8000b60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b64:	4619      	mov	r1, r3
 8000b66:	4833      	ldr	r0, [pc, #204]	; (8000c34 <GPIO_Init+0x108>)
 8000b68:	f000 fdfa 	bl	8001760 <HAL_GPIO_Init>



	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <GPIO_Init+0x104>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a2e      	ldr	r2, [pc, #184]	; (8000c30 <GPIO_Init+0x104>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <GPIO_Init+0x104>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef pwmgpio;

	pwmgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	pwmgpio.Pin  = GPIO_PIN_4;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
	pwmgpio.Speed = GPIO_SPEED_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	647b      	str	r3, [r7, #68]	; 0x44
	pwmgpio.Pull  = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	643b      	str	r3, [r7, #64]	; 0x40

	HAL_GPIO_Init(GPIOA,&pwmgpio);
 8000b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4826      	ldr	r0, [pc, #152]	; (8000c38 <GPIO_Init+0x10c>)
 8000ba0:	f000 fdde 	bl	8001760 <HAL_GPIO_Init>


	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <GPIO_Init+0x104>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a20      	ldr	r2, [pc, #128]	; (8000c30 <GPIO_Init+0x104>)
 8000bae:	f043 0310 	orr.w	r3, r3, #16
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <GPIO_Init+0x104>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0310 	and.w	r3, r3, #16
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef dcgpio;

	dcgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	dcgpio.Pin  = GPIO_PIN_9 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11; //pin7 is for direction, pin9 is for step
 8000bc4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
	dcgpio.Speed = GPIO_SPEED_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
	dcgpio.Pull  = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init(GPIOD,&dcgpio);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4818      	ldr	r0, [pc, #96]	; (8000c3c <GPIO_Init+0x110>)
 8000bda:	f000 fdc1 	bl	8001760 <HAL_GPIO_Init>


    __HAL_RCC_GPIOE_CLK_ENABLE();   // Enable clock for GPIOE
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <GPIO_Init+0x104>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <GPIO_Init+0x104>)
 8000be8:	f043 0310 	orr.w	r3, r3, #16
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <GPIO_Init+0x104>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0310 	and.w	r3, r3, #16
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_14;   // Button connected to PE15 and PE14
 8000bfa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;   // Interrupt Mode with Falling edge trigger detection
 8000c00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <GPIO_Init+0x108>)
 8000c12:	f000 fda5 	bl	8001760 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);   // Set interrupt priority
 8000c16:	2200      	movs	r2, #0
 8000c18:	2102      	movs	r1, #2
 8000c1a:	2028      	movs	r0, #40	; 0x28
 8000c1c:	f000 fcbd 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // Enable the interrupt
 8000c20:	2028      	movs	r0, #40	; 0x28
 8000c22:	f000 fcd6 	bl	80015d2 <HAL_NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3760      	adds	r7, #96	; 0x60
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)   // This function is called when the interrupt occurs
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_15 || GPIO_Pin == GPIO_PIN_14)
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_EXTI_Callback+0x1a>
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c58:	d105      	bne.n	8000c66 <HAL_GPIO_EXTI_Callback+0x26>
    {
        stepMotor2.moveState = 0;
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	741a      	strb	r2, [r3, #16]
        // To disable the interrupt
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000c60:	2028      	movs	r0, #40	; 0x28
 8000c62:	f000 fcc4 	bl	80015ee <HAL_NVIC_DisableIRQ>
    }
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000118 	.word	0x20000118

08000c74 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	if(rcvd_byte == '+')
 8000c7c:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <HAL_UART_RxCpltCallback+0x130>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b2b      	cmp	r3, #43	; 0x2b
 8000c82:	f040 8085 	bne.w	8000d90 <HAL_UART_RxCpltCallback+0x11c>
	{
		HAL_UART_Receive(&huart2,receive, 50, 20);
 8000c86:	2314      	movs	r3, #20
 8000c88:	2232      	movs	r2, #50	; 0x32
 8000c8a:	4947      	ldr	r1, [pc, #284]	; (8000da8 <HAL_UART_RxCpltCallback+0x134>)
 8000c8c:	4847      	ldr	r0, [pc, #284]	; (8000dac <HAL_UART_RxCpltCallback+0x138>)
 8000c8e:	f002 fb27 	bl	80032e0 <HAL_UART_Receive>
    	if(containsString((char*)receive,"rightxend"))
 8000c92:	4947      	ldr	r1, [pc, #284]	; (8000db0 <HAL_UART_RxCpltCallback+0x13c>)
 8000c94:	4844      	ldr	r0, [pc, #272]	; (8000da8 <HAL_UART_RxCpltCallback+0x134>)
 8000c96:	f7ff fcc3 	bl	8000620 <containsString>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <HAL_UART_RxCpltCallback+0x38>
    	{
    		stepMotor1.moveState = 0;
 8000ca0:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <HAL_UART_RxCpltCallback+0x140>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	741a      	strb	r2, [r3, #16]
    		clearBuf();
 8000ca6:	f7ff fca1 	bl	80005ec <clearBuf>
 8000caa:	e071      	b.n	8000d90 <HAL_UART_RxCpltCallback+0x11c>
    	}
        else if(containsString((char*)receive,"leftxend"))//pan left
 8000cac:	4942      	ldr	r1, [pc, #264]	; (8000db8 <HAL_UART_RxCpltCallback+0x144>)
 8000cae:	483e      	ldr	r0, [pc, #248]	; (8000da8 <HAL_UART_RxCpltCallback+0x134>)
 8000cb0:	f7ff fcb6 	bl	8000620 <containsString>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <HAL_UART_RxCpltCallback+0x52>
        {
        	stepMotor1.moveState = 0;
 8000cba:	4b3e      	ldr	r3, [pc, #248]	; (8000db4 <HAL_UART_RxCpltCallback+0x140>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	741a      	strb	r2, [r3, #16]
        	clearBuf();
 8000cc0:	f7ff fc94 	bl	80005ec <clearBuf>
 8000cc4:	e064      	b.n	8000d90 <HAL_UART_RxCpltCallback+0x11c>
        }
        else if(containsString((char*)receive, "downxend"))//tilt below
 8000cc6:	493d      	ldr	r1, [pc, #244]	; (8000dbc <HAL_UART_RxCpltCallback+0x148>)
 8000cc8:	4837      	ldr	r0, [pc, #220]	; (8000da8 <HAL_UART_RxCpltCallback+0x134>)
 8000cca:	f7ff fca9 	bl	8000620 <containsString>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d005      	beq.n	8000ce0 <HAL_UART_RxCpltCallback+0x6c>
        {
        	stepMotor2.moveState = 0;
 8000cd4:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <HAL_UART_RxCpltCallback+0x14c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	741a      	strb	r2, [r3, #16]
        	clearBuf();
 8000cda:	f7ff fc87 	bl	80005ec <clearBuf>
 8000cde:	e057      	b.n	8000d90 <HAL_UART_RxCpltCallback+0x11c>
        }
        else if(containsString((char*)receive, "upxend"))//tilt up
 8000ce0:	4938      	ldr	r1, [pc, #224]	; (8000dc4 <HAL_UART_RxCpltCallback+0x150>)
 8000ce2:	4831      	ldr	r0, [pc, #196]	; (8000da8 <HAL_UART_RxCpltCallback+0x134>)
 8000ce4:	f7ff fc9c 	bl	8000620 <containsString>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d005      	beq.n	8000cfa <HAL_UART_RxCpltCallback+0x86>
        {
        	stepMotor2.moveState = 0;
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_UART_RxCpltCallback+0x14c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	741a      	strb	r2, [r3, #16]
        	clearBuf();
 8000cf4:	f7ff fc7a 	bl	80005ec <clearBuf>
 8000cf8:	e04a      	b.n	8000d90 <HAL_UART_RxCpltCallback+0x11c>
        }
        else if(containsString((char*)receive, "rightupend"))//pan tilt right up
 8000cfa:	4933      	ldr	r1, [pc, #204]	; (8000dc8 <HAL_UART_RxCpltCallback+0x154>)
 8000cfc:	482a      	ldr	r0, [pc, #168]	; (8000da8 <HAL_UART_RxCpltCallback+0x134>)
 8000cfe:	f7ff fc8f 	bl	8000620 <containsString>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d008      	beq.n	8000d1a <HAL_UART_RxCpltCallback+0xa6>
        {
        	stepMotor1.moveState = 0;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_UART_RxCpltCallback+0x140>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	741a      	strb	r2, [r3, #16]
        	stepMotor2.moveState = 0;
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <HAL_UART_RxCpltCallback+0x14c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	741a      	strb	r2, [r3, #16]
        	clearBuf();
 8000d14:	f7ff fc6a 	bl	80005ec <clearBuf>
 8000d18:	e03a      	b.n	8000d90 <HAL_UART_RxCpltCallback+0x11c>
        }
        else if(containsString((char*)receive, "leftupend"))//pan tilt left up
 8000d1a:	492c      	ldr	r1, [pc, #176]	; (8000dcc <HAL_UART_RxCpltCallback+0x158>)
 8000d1c:	4822      	ldr	r0, [pc, #136]	; (8000da8 <HAL_UART_RxCpltCallback+0x134>)
 8000d1e:	f7ff fc7f 	bl	8000620 <containsString>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d008      	beq.n	8000d3a <HAL_UART_RxCpltCallback+0xc6>
        {
        	stepMotor1.moveState = 0;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <HAL_UART_RxCpltCallback+0x140>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	741a      	strb	r2, [r3, #16]
        	stepMotor2.moveState = 0;
 8000d2e:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <HAL_UART_RxCpltCallback+0x14c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	741a      	strb	r2, [r3, #16]
        	clearBuf();
 8000d34:	f7ff fc5a 	bl	80005ec <clearBuf>
 8000d38:	e02a      	b.n	8000d90 <HAL_UART_RxCpltCallback+0x11c>
        }
        else if(containsString((char*)receive, "rightdownend"))
 8000d3a:	4925      	ldr	r1, [pc, #148]	; (8000dd0 <HAL_UART_RxCpltCallback+0x15c>)
 8000d3c:	481a      	ldr	r0, [pc, #104]	; (8000da8 <HAL_UART_RxCpltCallback+0x134>)
 8000d3e:	f7ff fc6f 	bl	8000620 <containsString>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d008      	beq.n	8000d5a <HAL_UART_RxCpltCallback+0xe6>
        {
        	stepMotor1.moveState = 0;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_UART_RxCpltCallback+0x140>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	741a      	strb	r2, [r3, #16]
        	stepMotor2.moveState = 0;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_UART_RxCpltCallback+0x14c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	741a      	strb	r2, [r3, #16]
        	clearBuf();
 8000d54:	f7ff fc4a 	bl	80005ec <clearBuf>
 8000d58:	e01a      	b.n	8000d90 <HAL_UART_RxCpltCallback+0x11c>
        }
        else if(containsString((char*)receive, "leftdownend"))
 8000d5a:	491e      	ldr	r1, [pc, #120]	; (8000dd4 <HAL_UART_RxCpltCallback+0x160>)
 8000d5c:	4812      	ldr	r0, [pc, #72]	; (8000da8 <HAL_UART_RxCpltCallback+0x134>)
 8000d5e:	f7ff fc5f 	bl	8000620 <containsString>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d008      	beq.n	8000d7a <HAL_UART_RxCpltCallback+0x106>
        {
        	stepMotor1.moveState = 0;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_UART_RxCpltCallback+0x140>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	741a      	strb	r2, [r3, #16]
        	stepMotor2.moveState = 0;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_UART_RxCpltCallback+0x14c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	741a      	strb	r2, [r3, #16]
        	clearBuf();
 8000d74:	f7ff fc3a 	bl	80005ec <clearBuf>
 8000d78:	e00a      	b.n	8000d90 <HAL_UART_RxCpltCallback+0x11c>
        }
        else if(containsString((char*)receive, "fireoff"))
 8000d7a:	4917      	ldr	r1, [pc, #92]	; (8000dd8 <HAL_UART_RxCpltCallback+0x164>)
 8000d7c:	480a      	ldr	r0, [pc, #40]	; (8000da8 <HAL_UART_RxCpltCallback+0x134>)
 8000d7e:	f7ff fc4f 	bl	8000620 <containsString>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_UART_RxCpltCallback+0x11c>
        {
        	StopDcMotor();
 8000d88:	f7ff fd72 	bl	8000870 <StopDcMotor>
        	clearBuf();
 8000d8c:	f7ff fc2e 	bl	80005ec <clearBuf>
        }

	}
	HAL_UART_Receive_IT(&huart2, &rcvd_byte,1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	4904      	ldr	r1, [pc, #16]	; (8000da4 <HAL_UART_RxCpltCallback+0x130>)
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_UART_RxCpltCallback+0x138>)
 8000d96:	f002 fb45 	bl	8003424 <HAL_UART_Receive_IT>

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000134 	.word	0x20000134
 8000da8:	20000138 	.word	0x20000138
 8000dac:	20000028 	.word	0x20000028
 8000db0:	080044d0 	.word	0x080044d0
 8000db4:	200000fc 	.word	0x200000fc
 8000db8:	080044dc 	.word	0x080044dc
 8000dbc:	080044e8 	.word	0x080044e8
 8000dc0:	20000118 	.word	0x20000118
 8000dc4:	080044f4 	.word	0x080044f4
 8000dc8:	080044fc 	.word	0x080044fc
 8000dcc:	08004508 	.word	0x08004508
 8000dd0:	08004514 	.word	0x08004514
 8000dd4:	08004524 	.word	0x08004524
 8000dd8:	08004530 	.word	0x08004530

08000ddc <delay_us>:




void delay_us(uint32_t time)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim6);
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <delay_us+0x40>)
 8000de6:	f001 fb71 	bl	80024cc <HAL_TIM_Base_Start>
	while(time)
 8000dea:	e00c      	b.n	8000e06 <delay_us+0x2a>
	{
		//check update event flag is set
	    while( !(TIM6->SR & TIM_SR_UIF));
 8000dec:	bf00      	nop
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <delay_us+0x44>)
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f9      	beq.n	8000dee <delay_us+0x12>
		TIM6->SR = 0; //clear TIM_SR_UIF
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <delay_us+0x44>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
		--time;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	607b      	str	r3, [r7, #4]
	while(time)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1ef      	bne.n	8000dec <delay_us+0x10>
	}
	HAL_TIM_Base_Stop(&htim6);
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <delay_us+0x40>)
 8000e0e:	f001 fbc5 	bl	800259c <HAL_TIM_Base_Stop>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000006c 	.word	0x2000006c
 8000e20:	40001000 	.word	0x40001000

08000e24 <Step_Motor_Init>:

	HAL_TIM_Base_Stop(&htim6);
}

void Step_Motor_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	stepMotor1.GPIOx = GPIOE;
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <Step_Motor_Init+0x40>)
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <Step_Motor_Init+0x44>)
 8000e2c:	615a      	str	r2, [r3, #20]
	stepMotor1.pin_dir = GPIO_PIN_7;
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <Step_Motor_Init+0x40>)
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	835a      	strh	r2, [r3, #26]
	stepMotor1.pin_step = GPIO_PIN_9;
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <Step_Motor_Init+0x40>)
 8000e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3a:	831a      	strh	r2, [r3, #24]

	InitializeStepper(&stepMotor1);
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <Step_Motor_Init+0x40>)
 8000e3e:	f000 f915 	bl	800106c <InitializeStepper>


	stepMotor2.GPIOx = GPIOE;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <Step_Motor_Init+0x48>)
 8000e44:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <Step_Motor_Init+0x44>)
 8000e46:	615a      	str	r2, [r3, #20]
	stepMotor2.pin_dir = GPIO_PIN_8;
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <Step_Motor_Init+0x48>)
 8000e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4e:	835a      	strh	r2, [r3, #26]
	stepMotor2.pin_step = GPIO_PIN_10;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <Step_Motor_Init+0x48>)
 8000e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e56:	831a      	strh	r2, [r3, #24]

	InitializeStepper(&stepMotor2);
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <Step_Motor_Init+0x48>)
 8000e5a:	f000 f907 	bl	800106c <InitializeStepper>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200000fc 	.word	0x200000fc
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	20000118 	.word	0x20000118

08000e70 <Dc_Motor_Init>:


void Dc_Motor_Init()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7a:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <Dc_Motor_Init+0x38>)
 8000e7c:	f000 fe0c 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e86:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <Dc_Motor_Init+0x38>)
 8000e88:	f000 fe06 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <Dc_Motor_Init+0x38>)
 8000e94:	f000 fe00 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9e:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <Dc_Motor_Init+0x38>)
 8000ea0:	f000 fdfa 	bl	8001a98 <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40020c00 	.word	0x40020c00

08000eac <Error_Handler>:

void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	while(1);
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x4>
	...

08000eb4 <HAL_MspInit>:
#include "main.h"

//extern uint16_t pressed;

void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	//do low level processor specific inits
	//1. set up priority grouping of arm
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 fb63 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable reqired system exception
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_MspInit+0x40>)
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <HAL_MspInit+0x40>)
 8000ec4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000ec8:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for system exceptions

	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	f06f 000b 	mvn.w	r0, #11
 8000ed2:	f000 fb62 	bl	800159a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f06f 000a 	mvn.w	r0, #10
 8000ede:	f000 fb5c 	bl	800159a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f06f 0009 	mvn.w	r0, #9
 8000eea:	f000 fb56 	bl	800159a <HAL_NVIC_SetPriority>


}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	; 0x30
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	//Enable clock paths
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART2_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6453      	str	r3, [r2, #68]	; 0x44
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_UART_MspInit+0xb0>)
 8000f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]

	//configure pins for usart pins   PA2->TX, PA3->RX
	GPIO_InitTypeDef  gpio_usart2;

	gpio_usart2.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000f70:	230c      	movs	r3, #12
 8000f72:	61fb      	str	r3, [r7, #28]
	gpio_usart2.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
	gpio_usart2.Alternate = GPIO_AF7_USART2;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_usart2.Pull      = GPIO_PULLUP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_usart2.Speed     = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_GPIO_Init(GPIOA,&gpio_usart2);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <HAL_UART_MspInit+0xb4>)
 8000f8c:	f000 fbe8 	bl	8001760 <HAL_GPIO_Init>

	//configure the nvic
	HAL_NVIC_SetPriority(USART2_IRQn, 15,1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	210f      	movs	r1, #15
 8000f94:	2026      	movs	r0, #38	; 0x26
 8000f96:	f000 fb00 	bl	800159a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f9a:	2026      	movs	r0, #38	; 0x26
 8000f9c:	f000 fb19 	bl	80015d2 <HAL_NVIC_EnableIRQ>



}
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	; 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <HAL_TIM_Base_MspInit>:


//for us and ms
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	//Enable clock paths
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_TIM_Base_MspInit+0x3c>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_TIM_Base_MspInit+0x3c>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_TIM_Base_MspInit+0x3c>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
	//configure pins for usart pins   PA2->TX, PA3->RX

	//NOT NEEDED

	//configure the nvic
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15,0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	2036      	movs	r0, #54	; 0x36
 8000fda:	f000 fade 	bl	800159a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fde:	2036      	movs	r0, #54	; 0x36
 8000fe0:	f000 faf7 	bl	80015d2 <HAL_NVIC_EnableIRQ>

}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2OC_ch_gpios;

	//1. enable peripheral clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_TIM_PWM_MspInit+0x74>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_TIM_PWM_MspInit+0x74>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_TIM_PWM_MspInit+0x74>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_TIM_PWM_MspInit+0x74>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a11      	ldr	r2, [pc, #68]	; (8001064 <HAL_TIM_PWM_MspInit+0x74>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_TIM_PWM_MspInit+0x74>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

	//2. configure gpıos to behave as timer to channel 1,2
	//                            CH1        CH2
	tim2OC_ch_gpios.Pin       = GPIO_PIN_0 | GPIO_PIN_1;
 8001030:	2303      	movs	r3, #3
 8001032:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
	tim2OC_ch_gpios.Pull      = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA,&tim2OC_ch_gpios);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <HAL_TIM_PWM_MspInit+0x78>)
 8001048:	f000 fb8a 	bl	8001760 <HAL_GPIO_Init>



	//3. NVIV settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15,0);
 800104c:	2200      	movs	r2, #0
 800104e:	210f      	movs	r1, #15
 8001050:	201c      	movs	r0, #28
 8001052:	f000 faa2 	bl	800159a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001056:	201c      	movs	r0, #28
 8001058:	f000 fabb 	bl	80015d2 <HAL_NVIC_EnableIRQ>
}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <InitializeStepper>:
  * @func   setDirection  Initialize the starting direction of stepper motor in clockwise direction

  */

void InitializeStepper( StepperMotor *stepper)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	stepper->usDelay = 750;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f240 22ee 	movw	r2, #750	; 0x2ee
 800107a:	609a      	str	r2, [r3, #8]
	stepper->stepSize = 200;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	22c8      	movs	r2, #200	; 0xc8
 8001080:	605a      	str	r2, [r3, #4]

	setDirection(stepper,0);
 8001082:	2100      	movs	r1, #0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f807 	bl	8001098 <setDirection>
	stepper->moveState = false;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	741a      	strb	r2, [r3, #16]

}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <setDirection>:




void setDirection( StepperMotor *stepper,uint16_t direction)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
	stepper->shaftDirection = direction;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(stepper->GPIOx, stepper->pin_dir, stepper->shaftDirection);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6958      	ldr	r0, [r3, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	8b59      	ldrh	r1, [r3, #26]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	f000 fced 	bl	8001a98 <HAL_GPIO_WritePin>
	delay_us(stepper->usDelay);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fe8a 	bl	8000ddc <delay_us>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <moveContinous>:
	stepper->usDelay = 500 + ((2000-500)/(10 - 1) * speed);
}


void moveContinous(StepperMotor *stepper)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	// To disable the interrupt
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010d8:	2028      	movs	r0, #40	; 0x28
 80010da:	f000 fa7a 	bl	80015d2 <HAL_NVIC_EnableIRQ>
	stepper->moveState = 1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	741a      	strb	r2, [r3, #16]
 	while(stepper->moveState == 1)
 80010e4:	e019      	b.n	800111a <moveContinous+0x4a>
	{
		HAL_GPIO_WritePin(stepper->GPIOx, stepper->pin_step, GPIO_PIN_SET);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6958      	ldr	r0, [r3, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	8b1b      	ldrh	r3, [r3, #24]
 80010ee:	2201      	movs	r2, #1
 80010f0:	4619      	mov	r1, r3
 80010f2:	f000 fcd1 	bl	8001a98 <HAL_GPIO_WritePin>
		delay_us(stepper->usDelay);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fe6e 	bl	8000ddc <delay_us>
		HAL_GPIO_WritePin(stepper->GPIOx, stepper->pin_step, GPIO_PIN_RESET);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6958      	ldr	r0, [r3, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	8b1b      	ldrh	r3, [r3, #24]
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	f000 fcc4 	bl	8001a98 <HAL_GPIO_WritePin>
		delay_us(stepper->usDelay);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fe61 	bl	8000ddc <delay_us>
 	while(stepper->moveState == 1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7c1b      	ldrb	r3, [r3, #16]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d0e1      	beq.n	80010e6 <moveContinous+0x16>
	}
 	// To disable the interrupt
 	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001122:	2028      	movs	r0, #40	; 0x28
 8001124:	f000 fa63 	bl	80015ee <HAL_NVIC_DisableIRQ>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <moveTwoMotorContinous>:
	}
}


void moveTwoMotorContinous( StepperMotor *stepper1, StepperMotor *stepper2)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	// To disable the interrupt
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f000 fa49 	bl	80015d2 <HAL_NVIC_EnableIRQ>
	stepper1->usDelay = 325;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f240 1245 	movw	r2, #325	; 0x145
 8001146:	609a      	str	r2, [r3, #8]
	stepper1->moveState = 1;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	741a      	strb	r2, [r3, #16]
	stepper2->moveState = 1;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2201      	movs	r2, #1
 8001152:	741a      	strb	r2, [r3, #16]
	uint8_t  stopFlag = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]

	while(stepper1->moveState )
 8001158:	e042      	b.n	80011e0 <moveTwoMotorContinous+0xb0>
	{

		HAL_GPIO_WritePin(stepper1->GPIOx, stepper1->pin_step, GPIO_PIN_SET);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6958      	ldr	r0, [r3, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	8b1b      	ldrh	r3, [r3, #24]
 8001162:	2201      	movs	r2, #1
 8001164:	4619      	mov	r1, r3
 8001166:	f000 fc97 	bl	8001a98 <HAL_GPIO_WritePin>
		delay_us( (stepper1->usDelay) );
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fe34 	bl	8000ddc <delay_us>
		HAL_GPIO_WritePin(stepper1->GPIOx, stepper1->pin_step, GPIO_PIN_RESET);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6958      	ldr	r0, [r3, #20]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	8b1b      	ldrh	r3, [r3, #24]
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	f000 fc8a 	bl	8001a98 <HAL_GPIO_WritePin>
		//delay_us((stepper1->usDelay) / divider);
		//divider = 1;
		delay_us((stepper1->usDelay));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe27 	bl	8000ddc <delay_us>

		if(!stepper2->moveState)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	7c1b      	ldrb	r3, [r3, #16]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10a      	bne.n	80011ac <moveTwoMotorContinous+0x7c>
		{

			if(!stopFlag)
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d104      	bne.n	80011a6 <moveTwoMotorContinous+0x76>
			{
				stepper1->usDelay += stepper1->usDelay;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	005a      	lsls	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	609a      	str	r2, [r3, #8]
			}
			stopFlag = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
			continue;
 80011aa:	e019      	b.n	80011e0 <moveTwoMotorContinous+0xb0>


		}


		HAL_GPIO_WritePin(stepper2->GPIOx, stepper2->pin_step, GPIO_PIN_SET);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	6958      	ldr	r0, [r3, #20]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	8b1b      	ldrh	r3, [r3, #24]
 80011b4:	2201      	movs	r2, #1
 80011b6:	4619      	mov	r1, r3
 80011b8:	f000 fc6e 	bl	8001a98 <HAL_GPIO_WritePin>
		delay_us((stepper2->usDelay) );
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe0b 	bl	8000ddc <delay_us>
		HAL_GPIO_WritePin(stepper2->GPIOx, stepper2->pin_step, GPIO_PIN_RESET);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	6958      	ldr	r0, [r3, #20]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	8b1b      	ldrh	r3, [r3, #24]
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	f000 fc61 	bl	8001a98 <HAL_GPIO_WritePin>
		//delay_us((stepper2->usDelay) / divider);

		//divider = 1;
		delay_us( (stepper1->usDelay) );
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fdfe 	bl	8000ddc <delay_us>
	while(stepper1->moveState )
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7c1b      	ldrb	r3, [r3, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1b8      	bne.n	800115a <moveTwoMotorContinous+0x2a>
	}
	// To disable the interrupt
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80011e8:	2028      	movs	r0, #40	; 0x28
 80011ea:	f000 fa00 	bl	80015ee <HAL_NVIC_DisableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <SystemInit+0x20>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <SystemInit+0x20>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001222:	490e      	ldr	r1, [pc, #56]	; (800125c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001238:	4c0b      	ldr	r4, [pc, #44]	; (8001268 <LoopFillZerobss+0x26>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001246:	f7ff ffd7 	bl	80011f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124a:	f003 f883 	bl	8004354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff fb7b 	bl	8000948 <main>
  bx  lr    
 8001252:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001260:	08004560 	.word	0x08004560
  ldr r2, =_sbss
 8001264:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001268:	200001a0 	.word	0x200001a0

0800126c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_Init+0x40>)
 800127a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_Init+0x40>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x40>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f973 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fe06 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023c00 	.word	0x40023c00

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f999 	bl	800160a <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f953 	bl	800159a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000
 800130c:	20000008 	.word	0x20000008
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008
 8001338:	2000019c 	.word	0x2000019c

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	2000019c 	.word	0x2000019c

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db12      	blt.n	8001474 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	490a      	ldr	r1, [pc, #40]	; (8001480 <__NVIC_DisableIRQ+0x44>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	2001      	movs	r0, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
 8001462:	3320      	adds	r3, #32
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001468:	f3bf 8f4f 	dsb	sy
}
 800146c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146e:	f3bf 8f6f 	isb	sy
}
 8001472:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff05 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff1a 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff8e 	bl	80014d8 <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff0d 	bl	8001400 <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff1d 	bl	800143c <__NVIC_DisableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff94 	bl	8001540 <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001626:	f000 f802 	bl	800162e <HAL_SYSTICK_Callback>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800164a:	f7ff fe77 	bl	800133c <HAL_GetTick>
 800164e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d008      	beq.n	800166e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e052      	b.n	8001714 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0216 	bic.w	r2, r2, #22
 800167c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695a      	ldr	r2, [r3, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800168c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	2b00      	cmp	r3, #0
 8001694:	d103      	bne.n	800169e <HAL_DMA_Abort+0x62>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0208 	bic.w	r2, r2, #8
 80016ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016be:	e013      	b.n	80016e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016c0:	f7ff fe3c 	bl	800133c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d90c      	bls.n	80016e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2220      	movs	r2, #32
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2203      	movs	r2, #3
 80016d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e015      	b.n	8001714 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1e4      	bne.n	80016c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	223f      	movs	r2, #63	; 0x3f
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d004      	beq.n	800173a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00c      	b.n	8001754 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2205      	movs	r2, #5
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e16b      	b.n	8001a54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 815a 	bne.w	8001a4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d005      	beq.n	80017b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d130      	bne.n	8001814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b03      	cmp	r3, #3
 800181e:	d017      	beq.n	8001850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	69b9      	ldr	r1, [r7, #24]
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80b4 	beq.w	8001a4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b60      	ldr	r3, [pc, #384]	; (8001a6c <HAL_GPIO_Init+0x30c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a5f      	ldr	r2, [pc, #380]	; (8001a6c <HAL_GPIO_Init+0x30c>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_GPIO_Init+0x30c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001902:	4a5b      	ldr	r2, [pc, #364]	; (8001a70 <HAL_GPIO_Init+0x310>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a52      	ldr	r2, [pc, #328]	; (8001a74 <HAL_GPIO_Init+0x314>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d02b      	beq.n	8001986 <HAL_GPIO_Init+0x226>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_GPIO_Init+0x318>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d025      	beq.n	8001982 <HAL_GPIO_Init+0x222>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a50      	ldr	r2, [pc, #320]	; (8001a7c <HAL_GPIO_Init+0x31c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01f      	beq.n	800197e <HAL_GPIO_Init+0x21e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4f      	ldr	r2, [pc, #316]	; (8001a80 <HAL_GPIO_Init+0x320>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d019      	beq.n	800197a <HAL_GPIO_Init+0x21a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4e      	ldr	r2, [pc, #312]	; (8001a84 <HAL_GPIO_Init+0x324>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_GPIO_Init+0x216>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4d      	ldr	r2, [pc, #308]	; (8001a88 <HAL_GPIO_Init+0x328>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00d      	beq.n	8001972 <HAL_GPIO_Init+0x212>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4c      	ldr	r2, [pc, #304]	; (8001a8c <HAL_GPIO_Init+0x32c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <HAL_GPIO_Init+0x20e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4b      	ldr	r2, [pc, #300]	; (8001a90 <HAL_GPIO_Init+0x330>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_GPIO_Init+0x20a>
 8001966:	2307      	movs	r3, #7
 8001968:	e00e      	b.n	8001988 <HAL_GPIO_Init+0x228>
 800196a:	2308      	movs	r3, #8
 800196c:	e00c      	b.n	8001988 <HAL_GPIO_Init+0x228>
 800196e:	2306      	movs	r3, #6
 8001970:	e00a      	b.n	8001988 <HAL_GPIO_Init+0x228>
 8001972:	2305      	movs	r3, #5
 8001974:	e008      	b.n	8001988 <HAL_GPIO_Init+0x228>
 8001976:	2304      	movs	r3, #4
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x228>
 800197a:	2303      	movs	r3, #3
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x228>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x228>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x228>
 8001986:	2300      	movs	r3, #0
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001998:	4935      	ldr	r1, [pc, #212]	; (8001a70 <HAL_GPIO_Init+0x310>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a6:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <HAL_GPIO_Init+0x334>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ca:	4a32      	ldr	r2, [pc, #200]	; (8001a94 <HAL_GPIO_Init+0x334>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <HAL_GPIO_Init+0x334>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f4:	4a27      	ldr	r2, [pc, #156]	; (8001a94 <HAL_GPIO_Init+0x334>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <HAL_GPIO_Init+0x334>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <HAL_GPIO_Init+0x334>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_GPIO_Init+0x334>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <HAL_GPIO_Init+0x334>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	f67f ae90 	bls.w	800177c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40021400 	.word	0x40021400
 8001a8c:	40021800 	.word	0x40021800
 8001a90:	40021c00 	.word	0x40021c00
 8001a94:	40013c00 	.word	0x40013c00

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d006      	beq.n	8001af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f8a8 	bl	8000c40 <HAL_GPIO_EXTI_Callback>
  }
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40013c00 	.word	0x40013c00

08001afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e267      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d075      	beq.n	8001c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1a:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d00c      	beq.n	8001b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b26:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d112      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b32:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b3e:	d10b      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	4b7e      	ldr	r3, [pc, #504]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d05b      	beq.n	8001c04 <HAL_RCC_OscConfig+0x108>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d157      	bne.n	8001c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e242      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b60:	d106      	bne.n	8001b70 <HAL_RCC_OscConfig+0x74>
 8001b62:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a75      	ldr	r2, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e01d      	b.n	8001bac <HAL_RCC_OscConfig+0xb0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x98>
 8001b7a:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a6f      	ldr	r2, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a6c      	ldr	r2, [pc, #432]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xb0>
 8001b94:	4b69      	ldr	r3, [pc, #420]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a68      	ldr	r2, [pc, #416]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a65      	ldr	r2, [pc, #404]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fbc2 	bl	800133c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fbbe 	bl	800133c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e207      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0xc0>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fbae 	bl	800133c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fbaa 	bl	800133c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1f3      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	4b51      	ldr	r3, [pc, #324]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0xe8>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d063      	beq.n	8001cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c12:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d11c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x152>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e1c7      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4937      	ldr	r1, [pc, #220]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	e03a      	b.n	8001cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <HAL_RCC_OscConfig+0x244>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff fb63 	bl	800133c <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fb5f 	bl	800133c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1a8      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4925      	ldr	r1, [pc, #148]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <HAL_RCC_OscConfig+0x244>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fb42 	bl	800133c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fb3e 	bl	800133c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e187      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d036      	beq.n	8001d54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d016      	beq.n	8001d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_RCC_OscConfig+0x248>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fb22 	bl	800133c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fb1e 	bl	800133c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e167      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_OscConfig+0x240>)
 8001d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x200>
 8001d1a:	e01b      	b.n	8001d54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_OscConfig+0x248>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fb0b 	bl	800133c <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	e00e      	b.n	8001d48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fb07 	bl	800133c <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d907      	bls.n	8001d48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e150      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	42470000 	.word	0x42470000
 8001d44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ea      	bne.n	8001d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8097 	beq.w	8001e90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b81      	ldr	r3, [pc, #516]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10f      	bne.n	8001d92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	4b7d      	ldr	r3, [pc, #500]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a7c      	ldr	r2, [pc, #496]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b7a      	ldr	r3, [pc, #488]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d92:	4b77      	ldr	r3, [pc, #476]	; (8001f70 <HAL_RCC_OscConfig+0x474>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d118      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9e:	4b74      	ldr	r3, [pc, #464]	; (8001f70 <HAL_RCC_OscConfig+0x474>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a73      	ldr	r2, [pc, #460]	; (8001f70 <HAL_RCC_OscConfig+0x474>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001daa:	f7ff fac7 	bl	800133c <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7ff fac3 	bl	800133c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e10c      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <HAL_RCC_OscConfig+0x474>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x2ea>
 8001dd8:	4b64      	ldr	r3, [pc, #400]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a63      	ldr	r2, [pc, #396]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x324>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x30c>
 8001dee:	4b5f      	ldr	r3, [pc, #380]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a5e      	ldr	r2, [pc, #376]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	4b5c      	ldr	r3, [pc, #368]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a5b      	ldr	r2, [pc, #364]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
 8001e06:	e00b      	b.n	8001e20 <HAL_RCC_OscConfig+0x324>
 8001e08:	4b58      	ldr	r3, [pc, #352]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a57      	ldr	r2, [pc, #348]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
 8001e14:	4b55      	ldr	r3, [pc, #340]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	4a54      	ldr	r2, [pc, #336]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001e1a:	f023 0304 	bic.w	r3, r3, #4
 8001e1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d015      	beq.n	8001e54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff fa88 	bl	800133c <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7ff fa84 	bl	800133c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e0cb      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e46:	4b49      	ldr	r3, [pc, #292]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0ee      	beq.n	8001e30 <HAL_RCC_OscConfig+0x334>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7ff fa72 	bl	800133c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fa6e 	bl	800133c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0b5      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e72:	4b3e      	ldr	r3, [pc, #248]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ee      	bne.n	8001e5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d105      	bne.n	8001e90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e84:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a38      	ldr	r2, [pc, #224]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a1 	beq.w	8001fdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e9a:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d05c      	beq.n	8001f60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d141      	bne.n	8001f32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <HAL_RCC_OscConfig+0x478>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fa42 	bl	800133c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff fa3e 	bl	800133c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e087      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	019b      	lsls	r3, r3, #6
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	041b      	lsls	r3, r3, #16
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	491b      	ldr	r1, [pc, #108]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_RCC_OscConfig+0x478>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fa17 	bl	800133c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f12:	f7ff fa13 	bl	800133c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e05c      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x416>
 8001f30:	e054      	b.n	8001fdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_RCC_OscConfig+0x478>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fa00 	bl	800133c <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff f9fc 	bl	800133c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e045      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_OscConfig+0x470>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x444>
 8001f5e:	e03d      	b.n	8001fdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e038      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40007000 	.word	0x40007000
 8001f74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x4ec>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d028      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d121      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d11a      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d111      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0cc      	b.n	800219a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002000:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d90c      	bls.n	8002028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0b8      	b.n	800219a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d020      	beq.n	8002076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002040:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800204a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002064:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	494d      	ldr	r1, [pc, #308]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	4313      	orrs	r3, r2
 8002074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d044      	beq.n	800210c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d119      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e07f      	b.n	800219a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020aa:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e06f      	b.n	800219a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e067      	b.n	800219a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4934      	ldr	r1, [pc, #208]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020dc:	f7ff f92e 	bl	800133c <HAL_GetTick>
 80020e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7ff f92a 	bl	800133c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e04f      	b.n	800219a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 020c 	and.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d1eb      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_RCC_ClockConfig+0x1b8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d20c      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e032      	b.n	800219a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4916      	ldr	r1, [pc, #88]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	490e      	ldr	r1, [pc, #56]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002172:	f000 f821 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002176:	4602      	mov	r2, r0
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	490a      	ldr	r1, [pc, #40]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	5ccb      	ldrb	r3, [r1, r3]
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff f88e 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023c00 	.word	0x40023c00
 80021a8:	40023800 	.word	0x40023800
 80021ac:	08004538 	.word	0x08004538
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021bc:	b094      	sub	sp, #80	; 0x50
 80021be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	647b      	str	r3, [r7, #68]	; 0x44
 80021c4:	2300      	movs	r3, #0
 80021c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021c8:	2300      	movs	r3, #0
 80021ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d0:	4b79      	ldr	r3, [pc, #484]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d00d      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x40>
 80021dc:	2b08      	cmp	r3, #8
 80021de:	f200 80e1 	bhi.w	80023a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x34>
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ea:	e0db      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ec:	4b73      	ldr	r3, [pc, #460]	; (80023bc <HAL_RCC_GetSysClockFreq+0x204>)
 80021ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021f0:	e0db      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f2:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021f6:	e0d8      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f8:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002200:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002202:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d063      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220e:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	099b      	lsrs	r3, r3, #6
 8002214:	2200      	movs	r2, #0
 8002216:	63bb      	str	r3, [r7, #56]	; 0x38
 8002218:	63fa      	str	r2, [r7, #60]	; 0x3c
 800221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
 8002222:	2300      	movs	r3, #0
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
 8002226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800222a:	4622      	mov	r2, r4
 800222c:	462b      	mov	r3, r5
 800222e:	f04f 0000 	mov.w	r0, #0
 8002232:	f04f 0100 	mov.w	r1, #0
 8002236:	0159      	lsls	r1, r3, #5
 8002238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800223c:	0150      	lsls	r0, r2, #5
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4621      	mov	r1, r4
 8002244:	1a51      	subs	r1, r2, r1
 8002246:	6139      	str	r1, [r7, #16]
 8002248:	4629      	mov	r1, r5
 800224a:	eb63 0301 	sbc.w	r3, r3, r1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800225c:	4659      	mov	r1, fp
 800225e:	018b      	lsls	r3, r1, #6
 8002260:	4651      	mov	r1, sl
 8002262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002266:	4651      	mov	r1, sl
 8002268:	018a      	lsls	r2, r1, #6
 800226a:	4651      	mov	r1, sl
 800226c:	ebb2 0801 	subs.w	r8, r2, r1
 8002270:	4659      	mov	r1, fp
 8002272:	eb63 0901 	sbc.w	r9, r3, r1
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800228a:	4690      	mov	r8, r2
 800228c:	4699      	mov	r9, r3
 800228e:	4623      	mov	r3, r4
 8002290:	eb18 0303 	adds.w	r3, r8, r3
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	462b      	mov	r3, r5
 8002298:	eb49 0303 	adc.w	r3, r9, r3
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022aa:	4629      	mov	r1, r5
 80022ac:	024b      	lsls	r3, r1, #9
 80022ae:	4621      	mov	r1, r4
 80022b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022b4:	4621      	mov	r1, r4
 80022b6:	024a      	lsls	r2, r1, #9
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022be:	2200      	movs	r2, #0
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022c8:	f7fd ff7e 	bl	80001c8 <__aeabi_uldivmod>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4613      	mov	r3, r2
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d4:	e058      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d6:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	099b      	lsrs	r3, r3, #6
 80022dc:	2200      	movs	r2, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	4611      	mov	r1, r2
 80022e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022e6:	623b      	str	r3, [r7, #32]
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
 80022ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022f0:	4642      	mov	r2, r8
 80022f2:	464b      	mov	r3, r9
 80022f4:	f04f 0000 	mov.w	r0, #0
 80022f8:	f04f 0100 	mov.w	r1, #0
 80022fc:	0159      	lsls	r1, r3, #5
 80022fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002302:	0150      	lsls	r0, r2, #5
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4641      	mov	r1, r8
 800230a:	ebb2 0a01 	subs.w	sl, r2, r1
 800230e:	4649      	mov	r1, r9
 8002310:	eb63 0b01 	sbc.w	fp, r3, r1
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002320:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002324:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002328:	ebb2 040a 	subs.w	r4, r2, sl
 800232c:	eb63 050b 	sbc.w	r5, r3, fp
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	00eb      	lsls	r3, r5, #3
 800233a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800233e:	00e2      	lsls	r2, r4, #3
 8002340:	4614      	mov	r4, r2
 8002342:	461d      	mov	r5, r3
 8002344:	4643      	mov	r3, r8
 8002346:	18e3      	adds	r3, r4, r3
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	464b      	mov	r3, r9
 800234c:	eb45 0303 	adc.w	r3, r5, r3
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800235e:	4629      	mov	r1, r5
 8002360:	028b      	lsls	r3, r1, #10
 8002362:	4621      	mov	r1, r4
 8002364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002368:	4621      	mov	r1, r4
 800236a:	028a      	lsls	r2, r1, #10
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002372:	2200      	movs	r2, #0
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	61fa      	str	r2, [r7, #28]
 8002378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800237c:	f7fd ff24 	bl	80001c8 <__aeabi_uldivmod>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4613      	mov	r3, r2
 8002386:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	3301      	adds	r3, #1
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800239a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023a2:	e002      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetSysClockFreq+0x204>)
 80023a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3750      	adds	r7, #80	; 0x50
 80023b0:	46bd      	mov	sp, r7
 80023b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	00f42400 	.word	0x00f42400
 80023c0:	007a1200 	.word	0x007a1200

080023c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000000 	.word	0x20000000

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e0:	f7ff fff0 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	0a9b      	lsrs	r3, r3, #10
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4903      	ldr	r1, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	08004548 	.word	0x08004548

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002408:	f7ff ffdc 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0b5b      	lsrs	r3, r3, #13
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40023800 	.word	0x40023800
 8002428:	08004548 	.word	0x08004548

0800242c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e041      	b.n	80024c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe fdac 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f000 fbd0 	bl	8002c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e046      	b.n	8002572 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a23      	ldr	r2, [pc, #140]	; (8002580 <HAL_TIM_Base_Start+0xb4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d022      	beq.n	800253c <HAL_TIM_Base_Start+0x70>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fe:	d01d      	beq.n	800253c <HAL_TIM_Base_Start+0x70>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_TIM_Base_Start+0xb8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d018      	beq.n	800253c <HAL_TIM_Base_Start+0x70>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <HAL_TIM_Base_Start+0xbc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d013      	beq.n	800253c <HAL_TIM_Base_Start+0x70>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1c      	ldr	r2, [pc, #112]	; (800258c <HAL_TIM_Base_Start+0xc0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00e      	beq.n	800253c <HAL_TIM_Base_Start+0x70>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <HAL_TIM_Base_Start+0xc4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d009      	beq.n	800253c <HAL_TIM_Base_Start+0x70>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_TIM_Base_Start+0xc8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_TIM_Base_Start+0x70>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_TIM_Base_Start+0xcc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d111      	bne.n	8002560 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b06      	cmp	r3, #6
 800254c:	d010      	beq.n	8002570 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	e007      	b.n	8002570 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40010000 	.word	0x40010000
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800
 800258c:	40000c00 	.word	0x40000c00
 8002590:	40010400 	.word	0x40010400
 8002594:	40014000 	.word	0x40014000
 8002598:	40001800 	.word	0x40001800

0800259c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a1a      	ldr	r2, [r3, #32]
 80025aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10f      	bne.n	80025d4 <HAL_TIM_Base_Stop+0x38>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6a1a      	ldr	r2, [r3, #32]
 80025ba:	f240 4344 	movw	r3, #1092	; 0x444
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_TIM_Base_Stop+0x38>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e041      	b.n	8002680 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d106      	bne.n	8002616 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7fe fced 	bl	8000ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f000 faf1 	bl	8002c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_TIM_PWM_Start+0x24>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e022      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d109      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x3e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e015      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d109      	bne.n	80026e0 <HAL_TIM_PWM_Start+0x58>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e008      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07c      	b.n	80027f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <HAL_TIM_PWM_Start+0x82>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002708:	e013      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d104      	bne.n	800271a <HAL_TIM_PWM_Start+0x92>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002718:	e00b      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d104      	bne.n	800272a <HAL_TIM_PWM_Start+0xa2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002728:	e003      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fcb8 	bl	80030b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a2d      	ldr	r2, [pc, #180]	; (80027fc <HAL_TIM_PWM_Start+0x174>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_TIM_PWM_Start+0xcc>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2c      	ldr	r2, [pc, #176]	; (8002800 <HAL_TIM_PWM_Start+0x178>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d101      	bne.n	8002758 <HAL_TIM_PWM_Start+0xd0>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_TIM_PWM_Start+0xd2>
 8002758:	2300      	movs	r3, #0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a22      	ldr	r2, [pc, #136]	; (80027fc <HAL_TIM_PWM_Start+0x174>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d022      	beq.n	80027be <HAL_TIM_PWM_Start+0x136>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002780:	d01d      	beq.n	80027be <HAL_TIM_PWM_Start+0x136>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1f      	ldr	r2, [pc, #124]	; (8002804 <HAL_TIM_PWM_Start+0x17c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d018      	beq.n	80027be <HAL_TIM_PWM_Start+0x136>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <HAL_TIM_PWM_Start+0x180>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_TIM_PWM_Start+0x136>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1c      	ldr	r2, [pc, #112]	; (800280c <HAL_TIM_PWM_Start+0x184>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00e      	beq.n	80027be <HAL_TIM_PWM_Start+0x136>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a16      	ldr	r2, [pc, #88]	; (8002800 <HAL_TIM_PWM_Start+0x178>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_TIM_PWM_Start+0x136>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_TIM_PWM_Start+0x188>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_TIM_PWM_Start+0x136>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_TIM_PWM_Start+0x18c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d111      	bne.n	80027e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d010      	beq.n	80027f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e0:	e007      	b.n	80027f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40010000 	.word	0x40010000
 8002800:	40010400 	.word	0x40010400
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800
 800280c:	40000c00 	.word	0x40000c00
 8002810:	40014000 	.word	0x40014000
 8002814:	40001800 	.word	0x40001800

08002818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d122      	bne.n	8002874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b02      	cmp	r3, #2
 800283a:	d11b      	bne.n	8002874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0202 	mvn.w	r2, #2
 8002844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f9ba 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f9ac 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f9bd 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b04      	cmp	r3, #4
 8002880:	d122      	bne.n	80028c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b04      	cmp	r3, #4
 800288e:	d11b      	bne.n	80028c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0204 	mvn.w	r2, #4
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f990 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f982 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f993 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0208 	mvn.w	r2, #8
 80028ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2204      	movs	r2, #4
 80028f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f966 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f958 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f969 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b10      	cmp	r3, #16
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b10      	cmp	r3, #16
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0210 	mvn.w	r2, #16
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2208      	movs	r2, #8
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f93c 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f92e 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f93f 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10e      	bne.n	800299c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0201 	mvn.w	r2, #1
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f908 	bl	8002bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d10e      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d107      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fba3 	bl	800310e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d107      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f904 	bl	8002bfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d107      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0220 	mvn.w	r2, #32
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fb6d 	bl	80030fa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e0ae      	b.n	8002ba4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	f200 809f 	bhi.w	8002b94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a56:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5c:	08002a91 	.word	0x08002a91
 8002a60:	08002b95 	.word	0x08002b95
 8002a64:	08002b95 	.word	0x08002b95
 8002a68:	08002b95 	.word	0x08002b95
 8002a6c:	08002ad1 	.word	0x08002ad1
 8002a70:	08002b95 	.word	0x08002b95
 8002a74:	08002b95 	.word	0x08002b95
 8002a78:	08002b95 	.word	0x08002b95
 8002a7c:	08002b13 	.word	0x08002b13
 8002a80:	08002b95 	.word	0x08002b95
 8002a84:	08002b95 	.word	0x08002b95
 8002a88:	08002b95 	.word	0x08002b95
 8002a8c:	08002b53 	.word	0x08002b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f95a 	bl	8002d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0208 	orr.w	r2, r2, #8
 8002aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0204 	bic.w	r2, r2, #4
 8002aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6999      	ldr	r1, [r3, #24]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	619a      	str	r2, [r3, #24]
      break;
 8002ace:	e064      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f9aa 	bl	8002e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6999      	ldr	r1, [r3, #24]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	021a      	lsls	r2, r3, #8
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	619a      	str	r2, [r3, #24]
      break;
 8002b10:	e043      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f9ff 	bl	8002f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0208 	orr.w	r2, r2, #8
 8002b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0204 	bic.w	r2, r2, #4
 8002b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69d9      	ldr	r1, [r3, #28]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	61da      	str	r2, [r3, #28]
      break;
 8002b50:	e023      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fa53 	bl	8003004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69d9      	ldr	r1, [r3, #28]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	021a      	lsls	r2, r3, #8
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	61da      	str	r2, [r3, #28]
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	75fb      	strb	r3, [r7, #23]
      break;
 8002b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a40      	ldr	r2, [pc, #256]	; (8002d24 <TIM_Base_SetConfig+0x114>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d00f      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a3d      	ldr	r2, [pc, #244]	; (8002d28 <TIM_Base_SetConfig+0x118>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3c      	ldr	r2, [pc, #240]	; (8002d2c <TIM_Base_SetConfig+0x11c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d007      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a3b      	ldr	r2, [pc, #236]	; (8002d30 <TIM_Base_SetConfig+0x120>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a3a      	ldr	r2, [pc, #232]	; (8002d34 <TIM_Base_SetConfig+0x124>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d108      	bne.n	8002c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a2f      	ldr	r2, [pc, #188]	; (8002d24 <TIM_Base_SetConfig+0x114>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02b      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d027      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <TIM_Base_SetConfig+0x118>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d023      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <TIM_Base_SetConfig+0x11c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01f      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <TIM_Base_SetConfig+0x120>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d01b      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <TIM_Base_SetConfig+0x124>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d017      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a28      	ldr	r2, [pc, #160]	; (8002d38 <TIM_Base_SetConfig+0x128>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <TIM_Base_SetConfig+0x12c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00f      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <TIM_Base_SetConfig+0x130>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00b      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <TIM_Base_SetConfig+0x134>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d007      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a24      	ldr	r2, [pc, #144]	; (8002d48 <TIM_Base_SetConfig+0x138>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d003      	beq.n	8002cc2 <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <TIM_Base_SetConfig+0x13c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d108      	bne.n	8002cd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <TIM_Base_SetConfig+0x114>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <TIM_Base_SetConfig+0xf8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <TIM_Base_SetConfig+0x124>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d103      	bne.n	8002d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	615a      	str	r2, [r3, #20]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40010000 	.word	0x40010000
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40000800 	.word	0x40000800
 8002d30:	40000c00 	.word	0x40000c00
 8002d34:	40010400 	.word	0x40010400
 8002d38:	40014000 	.word	0x40014000
 8002d3c:	40014400 	.word	0x40014400
 8002d40:	40014800 	.word	0x40014800
 8002d44:	40001800 	.word	0x40001800
 8002d48:	40001c00 	.word	0x40001c00
 8002d4c:	40002000 	.word	0x40002000

08002d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 0302 	bic.w	r3, r3, #2
 8002d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a20      	ldr	r2, [pc, #128]	; (8002e28 <TIM_OC1_SetConfig+0xd8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_OC1_SetConfig+0x64>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <TIM_OC1_SetConfig+0xdc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d10c      	bne.n	8002dce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 0308 	bic.w	r3, r3, #8
 8002dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <TIM_OC1_SetConfig+0xd8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d003      	beq.n	8002dde <TIM_OC1_SetConfig+0x8e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <TIM_OC1_SetConfig+0xdc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d111      	bne.n	8002e02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	621a      	str	r2, [r3, #32]
}
 8002e1c:	bf00      	nop
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40010400 	.word	0x40010400

08002e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f023 0210 	bic.w	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0320 	bic.w	r3, r3, #32
 8002e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <TIM_OC2_SetConfig+0xe4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <TIM_OC2_SetConfig+0x68>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <TIM_OC2_SetConfig+0xe8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10d      	bne.n	8002eb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <TIM_OC2_SetConfig+0xe4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <TIM_OC2_SetConfig+0x94>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <TIM_OC2_SetConfig+0xe8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d113      	bne.n	8002eec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	621a      	str	r2, [r3, #32]
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40010400 	.word	0x40010400

08002f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <TIM_OC3_SetConfig+0xe0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d003      	beq.n	8002f82 <TIM_OC3_SetConfig+0x66>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a20      	ldr	r2, [pc, #128]	; (8003000 <TIM_OC3_SetConfig+0xe4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10d      	bne.n	8002f9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <TIM_OC3_SetConfig+0xe0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d003      	beq.n	8002fae <TIM_OC3_SetConfig+0x92>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a15      	ldr	r2, [pc, #84]	; (8003000 <TIM_OC3_SetConfig+0xe4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d113      	bne.n	8002fd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	621a      	str	r2, [r3, #32]
}
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40010000 	.word	0x40010000
 8003000:	40010400 	.word	0x40010400

08003004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800304e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	031b      	lsls	r3, r3, #12
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <TIM_OC4_SetConfig+0xa4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <TIM_OC4_SetConfig+0x68>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a11      	ldr	r2, [pc, #68]	; (80030ac <TIM_OC4_SetConfig+0xa8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d109      	bne.n	8003080 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40010000 	.word	0x40010000
 80030ac:	40010400 	.word	0x40010400

080030b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2201      	movs	r2, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1a      	ldr	r2, [r3, #32]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	401a      	ands	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e03f      	b.n	80031b4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fd fed5 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2224      	movs	r2, #36	; 0x24
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003164:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fe80 	bl	8003e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800317a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800318a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800319a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d17c      	bne.n	80032d6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_UART_Transmit+0x2c>
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e075      	b.n	80032d8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Transmit+0x3e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e06e      	b.n	80032d8 <HAL_UART_Transmit+0x11c>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2221      	movs	r2, #33	; 0x21
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003210:	f7fe f894 	bl	800133c <HAL_GetTick>
 8003214:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322a:	d108      	bne.n	800323e <HAL_UART_Transmit+0x82>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d104      	bne.n	800323e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	e003      	b.n	8003246 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800324e:	e02a      	b.n	80032a6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2200      	movs	r2, #0
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fbc0 	bl	80039e0 <UART_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e036      	b.n	80032d8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800327e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	3302      	adds	r3, #2
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	e007      	b.n	8003298 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1cf      	bne.n	8003250 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2200      	movs	r2, #0
 80032b8:	2140      	movs	r1, #64	; 0x40
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fb90 	bl	80039e0 <UART_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e006      	b.n	80032d8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	f040 808c 	bne.w	800341a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_UART_Receive+0x2e>
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e084      	b.n	800341c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_UART_Receive+0x40>
 800331c:	2302      	movs	r3, #2
 800331e:	e07d      	b.n	800341c <HAL_UART_Receive+0x13c>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2222      	movs	r2, #34	; 0x22
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800333c:	f7fd fffe 	bl	800133c <HAL_GetTick>
 8003340:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	88fa      	ldrh	r2, [r7, #6]
 8003346:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	d108      	bne.n	800336a <HAL_UART_Receive+0x8a>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	e003      	b.n	8003372 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800337a:	e043      	b.n	8003404 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2200      	movs	r2, #0
 8003384:	2120      	movs	r1, #32
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fb2a 	bl	80039e0 <UART_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e042      	b.n	800341c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10c      	bne.n	80033b6 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	3302      	adds	r3, #2
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	e01f      	b.n	80033f6 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033be:	d007      	beq.n	80033d0 <HAL_UART_Receive+0xf0>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <HAL_UART_Receive+0xfe>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d106      	bne.n	80033de <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e008      	b.n	80033f0 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1b6      	bne.n	800337c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
  }
}
 800341c:	4618      	mov	r0, r3
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b20      	cmp	r3, #32
 800343c:	d11d      	bne.n	800347a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_UART_Receive_IT+0x26>
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e016      	b.n	800347c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_UART_Receive_IT+0x38>
 8003458:	2302      	movs	r3, #2
 800345a:	e00f      	b.n	800347c <HAL_UART_Receive_IT+0x58>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	461a      	mov	r2, r3
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fb23 	bl	8003abc <UART_Start_Receive_IT>
 8003476:	4603      	mov	r3, r0
 8003478:	e000      	b.n	800347c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
  }
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b0ba      	sub	sp, #232	; 0xe8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_UART_IRQHandler+0x66>
 80034d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fc07 	bl	8003cf6 <UART_Receive_IT>
      return;
 80034e8:	e256      	b.n	8003998 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80de 	beq.w	80036b0 <HAL_UART_IRQHandler+0x22c>
 80034f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d106      	bne.n	800350e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003504:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80d1 	beq.w	80036b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_UART_IRQHandler+0xae>
 800351a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_UART_IRQHandler+0xd2>
 800353e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f043 0202 	orr.w	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_UART_IRQHandler+0xf6>
 8003562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f043 0204 	orr.w	r2, r3, #4
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800357a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d011      	beq.n	80035aa <HAL_UART_IRQHandler+0x126>
 8003586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d105      	bne.n	800359e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f043 0208 	orr.w	r2, r3, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 81ed 	beq.w	800398e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_UART_IRQHandler+0x14e>
 80035c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fb92 	bl	8003cf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <HAL_UART_IRQHandler+0x17a>
 80035f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d04f      	beq.n	800369e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fa9a 	bl	8003b38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d141      	bne.n	8003696 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3314      	adds	r3, #20
 8003618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800362c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3314      	adds	r3, #20
 800363a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800363e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800364a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1d9      	bne.n	8003612 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	2b00      	cmp	r3, #0
 8003664:	d013      	beq.n	800368e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	4a7d      	ldr	r2, [pc, #500]	; (8003860 <HAL_UART_IRQHandler+0x3dc>)
 800366c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe f852 	bl	800171c <HAL_DMA_Abort_IT>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003688:	4610      	mov	r0, r2
 800368a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368c:	e00e      	b.n	80036ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f990 	bl	80039b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003694:	e00a      	b.n	80036ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f98c 	bl	80039b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	e006      	b.n	80036ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f988 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036aa:	e170      	b.n	800398e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ac:	bf00      	nop
    return;
 80036ae:	e16e      	b.n	800398e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	f040 814a 	bne.w	800394e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8143 	beq.w	800394e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 813c 	beq.w	800394e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	f040 80b4 	bne.w	8003864 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003708:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8140 	beq.w	8003992 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800371a:	429a      	cmp	r2, r3
 800371c:	f080 8139 	bcs.w	8003992 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003726:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003732:	f000 8088 	beq.w	8003846 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	330c      	adds	r3, #12
 800373c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800374c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003762:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800376e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800377a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1d9      	bne.n	8003736 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3314      	adds	r3, #20
 8003788:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e1      	bne.n	8003782 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3314      	adds	r3, #20
 80037c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3314      	adds	r3, #20
 80037de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e3      	bne.n	80037be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	330c      	adds	r3, #12
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003816:	f023 0310 	bic.w	r3, r3, #16
 800381a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	330c      	adds	r3, #12
 8003824:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003828:	65ba      	str	r2, [r7, #88]	; 0x58
 800382a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800382e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003830:	e841 2300 	strex	r3, r2, [r1]
 8003834:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e3      	bne.n	8003804 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	4618      	mov	r0, r3
 8003842:	f7fd fefb 	bl	800163c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800384e:	b29b      	uxth	r3, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	b29b      	uxth	r3, r3
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8b6 	bl	80039c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800385c:	e099      	b.n	8003992 <HAL_UART_IRQHandler+0x50e>
 800385e:	bf00      	nop
 8003860:	08003bff 	.word	0x08003bff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800386c:	b29b      	uxth	r3, r3
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 808b 	beq.w	8003996 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003880:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8086 	beq.w	8003996 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038ae:	647a      	str	r2, [r7, #68]	; 0x44
 80038b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e3      	bne.n	800388a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	623b      	str	r3, [r7, #32]
   return(result);
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038e6:	633a      	str	r2, [r7, #48]	; 0x30
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e3      	bne.n	80038c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	60fb      	str	r3, [r7, #12]
   return(result);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0310 	bic.w	r3, r3, #16
 800391e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800392c:	61fa      	str	r2, [r7, #28]
 800392e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	69b9      	ldr	r1, [r7, #24]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	617b      	str	r3, [r7, #20]
   return(result);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e3      	bne.n	8003908 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003944:	4619      	mov	r1, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f83e 	bl	80039c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800394c:	e023      	b.n	8003996 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_UART_IRQHandler+0x4ea>
 800395a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f95d 	bl	8003c26 <UART_Transmit_IT>
    return;
 800396c:	e014      	b.n	8003998 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00e      	beq.n	8003998 <HAL_UART_IRQHandler+0x514>
 800397a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f99d 	bl	8003cc6 <UART_EndTransmit_IT>
    return;
 800398c:	e004      	b.n	8003998 <HAL_UART_IRQHandler+0x514>
    return;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <HAL_UART_IRQHandler+0x514>
      return;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <HAL_UART_IRQHandler+0x514>
      return;
 8003996:	bf00      	nop
  }
}
 8003998:	37e8      	adds	r7, #232	; 0xe8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop

080039a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b090      	sub	sp, #64	; 0x40
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f0:	e050      	b.n	8003a94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d04c      	beq.n	8003a94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a00:	f7fd fc9c 	bl	800133c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d241      	bcs.n	8003a94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a30:	637a      	str	r2, [r7, #52]	; 0x34
 8003a32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e5      	bne.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	613b      	str	r3, [r7, #16]
   return(result);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3314      	adds	r3, #20
 8003a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a64:	623a      	str	r2, [r7, #32]
 8003a66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	69f9      	ldr	r1, [r7, #28]
 8003a6a:	6a3a      	ldr	r2, [r7, #32]
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e5      	bne.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e00f      	b.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d09f      	beq.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3740      	adds	r7, #64	; 0x40
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2222      	movs	r2, #34	; 0x22
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0220 	orr.w	r2, r2, #32
 8003b28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b095      	sub	sp, #84	; 0x54
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b60:	643a      	str	r2, [r7, #64]	; 0x40
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e5      	bne.n	8003b40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3314      	adds	r3, #20
 8003b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d119      	bne.n	8003be4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f023 0310 	bic.w	r3, r3, #16
 8003bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bd0:	61ba      	str	r2, [r7, #24]
 8003bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6979      	ldr	r1, [r7, #20]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e5      	bne.n	8003bb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bf2:	bf00      	nop
 8003bf4:	3754      	adds	r7, #84	; 0x54
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff fecb 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b21      	cmp	r3, #33	; 0x21
 8003c38:	d13e      	bne.n	8003cb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c42:	d114      	bne.n	8003c6e <UART_Transmit_IT+0x48>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d110      	bne.n	8003c6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	1c9a      	adds	r2, r3, #2
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]
 8003c6c:	e008      	b.n	8003c80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	1c59      	adds	r1, r3, #1
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6211      	str	r1, [r2, #32]
 8003c78:	781a      	ldrb	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fe5a 	bl	80039a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b08c      	sub	sp, #48	; 0x30
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b22      	cmp	r3, #34	; 0x22
 8003d08:	f040 80ab 	bne.w	8003e62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d14:	d117      	bne.n	8003d46 <UART_Receive_IT+0x50>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d113      	bne.n	8003d46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	1c9a      	adds	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28
 8003d44:	e026      	b.n	8003d94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d58:	d007      	beq.n	8003d6a <UART_Receive_IT+0x74>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <UART_Receive_IT+0x82>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e008      	b.n	8003d8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	4619      	mov	r1, r3
 8003da2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d15a      	bne.n	8003e5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0220 	bic.w	r2, r2, #32
 8003db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d135      	bne.n	8003e54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0e:	623a      	str	r2, [r7, #32]
 8003e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	69f9      	ldr	r1, [r7, #28]
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e5      	bne.n	8003dee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d10a      	bne.n	8003e46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fdbb 	bl	80039c8 <HAL_UARTEx_RxEventCallback>
 8003e52:	e002      	b.n	8003e5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7fc ff0d 	bl	8000c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e002      	b.n	8003e64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3730      	adds	r7, #48	; 0x30
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e70:	b0c0      	sub	sp, #256	; 0x100
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	68d9      	ldr	r1, [r3, #12]
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	ea40 0301 	orr.w	r3, r0, r1
 8003e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ec4:	f021 010c 	bic.w	r1, r1, #12
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	6999      	ldr	r1, [r3, #24]
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	ea40 0301 	orr.w	r3, r0, r1
 8003ef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b8f      	ldr	r3, [pc, #572]	; (8004138 <UART_SetConfig+0x2cc>)
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d005      	beq.n	8003f0c <UART_SetConfig+0xa0>
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b8d      	ldr	r3, [pc, #564]	; (800413c <UART_SetConfig+0x2d0>)
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d104      	bne.n	8003f16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f0c:	f7fe fa7a 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8003f10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f14:	e003      	b.n	8003f1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f16:	f7fe fa61 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8003f1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f28:	f040 810c 	bne.w	8004144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f3e:	4622      	mov	r2, r4
 8003f40:	462b      	mov	r3, r5
 8003f42:	1891      	adds	r1, r2, r2
 8003f44:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f46:	415b      	adcs	r3, r3
 8003f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f4e:	4621      	mov	r1, r4
 8003f50:	eb12 0801 	adds.w	r8, r2, r1
 8003f54:	4629      	mov	r1, r5
 8003f56:	eb43 0901 	adc.w	r9, r3, r1
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f6e:	4690      	mov	r8, r2
 8003f70:	4699      	mov	r9, r3
 8003f72:	4623      	mov	r3, r4
 8003f74:	eb18 0303 	adds.w	r3, r8, r3
 8003f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	eb49 0303 	adc.w	r3, r9, r3
 8003f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	18db      	adds	r3, r3, r3
 8003f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	eb42 0303 	adc.w	r3, r2, r3
 8003fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fb0:	f7fc f90a 	bl	80001c8 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4b61      	ldr	r3, [pc, #388]	; (8004140 <UART_SetConfig+0x2d4>)
 8003fba:	fba3 2302 	umull	r2, r3, r3, r2
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	011c      	lsls	r4, r3, #4
 8003fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	1891      	adds	r1, r2, r2
 8003fda:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fdc:	415b      	adcs	r3, r3
 8003fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	eb12 0a01 	adds.w	sl, r2, r1
 8003fea:	4649      	mov	r1, r9
 8003fec:	eb43 0b01 	adc.w	fp, r3, r1
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ffc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004004:	4692      	mov	sl, r2
 8004006:	469b      	mov	fp, r3
 8004008:	4643      	mov	r3, r8
 800400a:	eb1a 0303 	adds.w	r3, sl, r3
 800400e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004012:	464b      	mov	r3, r9
 8004014:	eb4b 0303 	adc.w	r3, fp, r3
 8004018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004028:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800402c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004030:	460b      	mov	r3, r1
 8004032:	18db      	adds	r3, r3, r3
 8004034:	643b      	str	r3, [r7, #64]	; 0x40
 8004036:	4613      	mov	r3, r2
 8004038:	eb42 0303 	adc.w	r3, r2, r3
 800403c:	647b      	str	r3, [r7, #68]	; 0x44
 800403e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004046:	f7fc f8bf 	bl	80001c8 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4611      	mov	r1, r2
 8004050:	4b3b      	ldr	r3, [pc, #236]	; (8004140 <UART_SetConfig+0x2d4>)
 8004052:	fba3 2301 	umull	r2, r3, r3, r1
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	2264      	movs	r2, #100	; 0x64
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	1acb      	subs	r3, r1, r3
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004066:	4b36      	ldr	r3, [pc, #216]	; (8004140 <UART_SetConfig+0x2d4>)
 8004068:	fba3 2302 	umull	r2, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004074:	441c      	add	r4, r3
 8004076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004080:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004088:	4642      	mov	r2, r8
 800408a:	464b      	mov	r3, r9
 800408c:	1891      	adds	r1, r2, r2
 800408e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004090:	415b      	adcs	r3, r3
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004098:	4641      	mov	r1, r8
 800409a:	1851      	adds	r1, r2, r1
 800409c:	6339      	str	r1, [r7, #48]	; 0x30
 800409e:	4649      	mov	r1, r9
 80040a0:	414b      	adcs	r3, r1
 80040a2:	637b      	str	r3, [r7, #52]	; 0x34
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040b0:	4659      	mov	r1, fp
 80040b2:	00cb      	lsls	r3, r1, #3
 80040b4:	4651      	mov	r1, sl
 80040b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ba:	4651      	mov	r1, sl
 80040bc:	00ca      	lsls	r2, r1, #3
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	4642      	mov	r2, r8
 80040c6:	189b      	adds	r3, r3, r2
 80040c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040cc:	464b      	mov	r3, r9
 80040ce:	460a      	mov	r2, r1
 80040d0:	eb42 0303 	adc.w	r3, r2, r3
 80040d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040ec:	460b      	mov	r3, r1
 80040ee:	18db      	adds	r3, r3, r3
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f2:	4613      	mov	r3, r2
 80040f4:	eb42 0303 	adc.w	r3, r2, r3
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004102:	f7fc f861 	bl	80001c8 <__aeabi_uldivmod>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <UART_SetConfig+0x2d4>)
 800410c:	fba3 1302 	umull	r1, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	2164      	movs	r1, #100	; 0x64
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	3332      	adds	r3, #50	; 0x32
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <UART_SetConfig+0x2d4>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	f003 0207 	and.w	r2, r3, #7
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4422      	add	r2, r4
 8004132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004134:	e105      	b.n	8004342 <UART_SetConfig+0x4d6>
 8004136:	bf00      	nop
 8004138:	40011000 	.word	0x40011000
 800413c:	40011400 	.word	0x40011400
 8004140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004148:	2200      	movs	r2, #0
 800414a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800414e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004156:	4642      	mov	r2, r8
 8004158:	464b      	mov	r3, r9
 800415a:	1891      	adds	r1, r2, r2
 800415c:	6239      	str	r1, [r7, #32]
 800415e:	415b      	adcs	r3, r3
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
 8004162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004166:	4641      	mov	r1, r8
 8004168:	1854      	adds	r4, r2, r1
 800416a:	4649      	mov	r1, r9
 800416c:	eb43 0501 	adc.w	r5, r3, r1
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	00eb      	lsls	r3, r5, #3
 800417a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800417e:	00e2      	lsls	r2, r4, #3
 8004180:	4614      	mov	r4, r2
 8004182:	461d      	mov	r5, r3
 8004184:	4643      	mov	r3, r8
 8004186:	18e3      	adds	r3, r4, r3
 8004188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800418c:	464b      	mov	r3, r9
 800418e:	eb45 0303 	adc.w	r3, r5, r3
 8004192:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041b2:	4629      	mov	r1, r5
 80041b4:	008b      	lsls	r3, r1, #2
 80041b6:	4621      	mov	r1, r4
 80041b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041bc:	4621      	mov	r1, r4
 80041be:	008a      	lsls	r2, r1, #2
 80041c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041c4:	f7fc f800 	bl	80001c8 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4b60      	ldr	r3, [pc, #384]	; (8004350 <UART_SetConfig+0x4e4>)
 80041ce:	fba3 2302 	umull	r2, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	011c      	lsls	r4, r3, #4
 80041d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	61b9      	str	r1, [r7, #24]
 80041f0:	415b      	adcs	r3, r3
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f8:	4641      	mov	r1, r8
 80041fa:	1851      	adds	r1, r2, r1
 80041fc:	6139      	str	r1, [r7, #16]
 80041fe:	4649      	mov	r1, r9
 8004200:	414b      	adcs	r3, r1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004210:	4659      	mov	r1, fp
 8004212:	00cb      	lsls	r3, r1, #3
 8004214:	4651      	mov	r1, sl
 8004216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421a:	4651      	mov	r1, sl
 800421c:	00ca      	lsls	r2, r1, #3
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	4603      	mov	r3, r0
 8004224:	4642      	mov	r2, r8
 8004226:	189b      	adds	r3, r3, r2
 8004228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800422c:	464b      	mov	r3, r9
 800422e:	460a      	mov	r2, r1
 8004230:	eb42 0303 	adc.w	r3, r2, r3
 8004234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	67bb      	str	r3, [r7, #120]	; 0x78
 8004242:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004250:	4649      	mov	r1, r9
 8004252:	008b      	lsls	r3, r1, #2
 8004254:	4641      	mov	r1, r8
 8004256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800425a:	4641      	mov	r1, r8
 800425c:	008a      	lsls	r2, r1, #2
 800425e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004262:	f7fb ffb1 	bl	80001c8 <__aeabi_uldivmod>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4b39      	ldr	r3, [pc, #228]	; (8004350 <UART_SetConfig+0x4e4>)
 800426c:	fba3 1302 	umull	r1, r3, r3, r2
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	2164      	movs	r1, #100	; 0x64
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	3332      	adds	r3, #50	; 0x32
 800427e:	4a34      	ldr	r2, [pc, #208]	; (8004350 <UART_SetConfig+0x4e4>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428a:	441c      	add	r4, r3
 800428c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004290:	2200      	movs	r2, #0
 8004292:	673b      	str	r3, [r7, #112]	; 0x70
 8004294:	677a      	str	r2, [r7, #116]	; 0x74
 8004296:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800429a:	4642      	mov	r2, r8
 800429c:	464b      	mov	r3, r9
 800429e:	1891      	adds	r1, r2, r2
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	415b      	adcs	r3, r3
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042aa:	4641      	mov	r1, r8
 80042ac:	1851      	adds	r1, r2, r1
 80042ae:	6039      	str	r1, [r7, #0]
 80042b0:	4649      	mov	r1, r9
 80042b2:	414b      	adcs	r3, r1
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042c2:	4659      	mov	r1, fp
 80042c4:	00cb      	lsls	r3, r1, #3
 80042c6:	4651      	mov	r1, sl
 80042c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042cc:	4651      	mov	r1, sl
 80042ce:	00ca      	lsls	r2, r1, #3
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	4603      	mov	r3, r0
 80042d6:	4642      	mov	r2, r8
 80042d8:	189b      	adds	r3, r3, r2
 80042da:	66bb      	str	r3, [r7, #104]	; 0x68
 80042dc:	464b      	mov	r3, r9
 80042de:	460a      	mov	r2, r1
 80042e0:	eb42 0303 	adc.w	r3, r2, r3
 80042e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	663b      	str	r3, [r7, #96]	; 0x60
 80042f0:	667a      	str	r2, [r7, #100]	; 0x64
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042fe:	4649      	mov	r1, r9
 8004300:	008b      	lsls	r3, r1, #2
 8004302:	4641      	mov	r1, r8
 8004304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004308:	4641      	mov	r1, r8
 800430a:	008a      	lsls	r2, r1, #2
 800430c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004310:	f7fb ff5a 	bl	80001c8 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <UART_SetConfig+0x4e4>)
 800431a:	fba3 1302 	umull	r1, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2164      	movs	r1, #100	; 0x64
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	3332      	adds	r3, #50	; 0x32
 800432c:	4a08      	ldr	r2, [pc, #32]	; (8004350 <UART_SetConfig+0x4e4>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	f003 020f 	and.w	r2, r3, #15
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4422      	add	r2, r4
 8004340:	609a      	str	r2, [r3, #8]
}
 8004342:	bf00      	nop
 8004344:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004348:	46bd      	mov	sp, r7
 800434a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434e:	bf00      	nop
 8004350:	51eb851f 	.word	0x51eb851f

08004354 <__libc_init_array>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	4d0d      	ldr	r5, [pc, #52]	; (800438c <__libc_init_array+0x38>)
 8004358:	4c0d      	ldr	r4, [pc, #52]	; (8004390 <__libc_init_array+0x3c>)
 800435a:	1b64      	subs	r4, r4, r5
 800435c:	10a4      	asrs	r4, r4, #2
 800435e:	2600      	movs	r6, #0
 8004360:	42a6      	cmp	r6, r4
 8004362:	d109      	bne.n	8004378 <__libc_init_array+0x24>
 8004364:	4d0b      	ldr	r5, [pc, #44]	; (8004394 <__libc_init_array+0x40>)
 8004366:	4c0c      	ldr	r4, [pc, #48]	; (8004398 <__libc_init_array+0x44>)
 8004368:	f000 f836 	bl	80043d8 <_init>
 800436c:	1b64      	subs	r4, r4, r5
 800436e:	10a4      	asrs	r4, r4, #2
 8004370:	2600      	movs	r6, #0
 8004372:	42a6      	cmp	r6, r4
 8004374:	d105      	bne.n	8004382 <__libc_init_array+0x2e>
 8004376:	bd70      	pop	{r4, r5, r6, pc}
 8004378:	f855 3b04 	ldr.w	r3, [r5], #4
 800437c:	4798      	blx	r3
 800437e:	3601      	adds	r6, #1
 8004380:	e7ee      	b.n	8004360 <__libc_init_array+0xc>
 8004382:	f855 3b04 	ldr.w	r3, [r5], #4
 8004386:	4798      	blx	r3
 8004388:	3601      	adds	r6, #1
 800438a:	e7f2      	b.n	8004372 <__libc_init_array+0x1e>
 800438c:	08004558 	.word	0x08004558
 8004390:	08004558 	.word	0x08004558
 8004394:	08004558 	.word	0x08004558
 8004398:	0800455c 	.word	0x0800455c

0800439c <memset>:
 800439c:	4402      	add	r2, r0
 800439e:	4603      	mov	r3, r0
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d100      	bne.n	80043a6 <memset+0xa>
 80043a4:	4770      	bx	lr
 80043a6:	f803 1b01 	strb.w	r1, [r3], #1
 80043aa:	e7f9      	b.n	80043a0 <memset+0x4>

080043ac <strstr>:
 80043ac:	780a      	ldrb	r2, [r1, #0]
 80043ae:	b570      	push	{r4, r5, r6, lr}
 80043b0:	b96a      	cbnz	r2, 80043ce <strstr+0x22>
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d109      	bne.n	80043cc <strstr+0x20>
 80043b8:	460c      	mov	r4, r1
 80043ba:	4605      	mov	r5, r0
 80043bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f6      	beq.n	80043b2 <strstr+0x6>
 80043c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80043c8:	429e      	cmp	r6, r3
 80043ca:	d0f7      	beq.n	80043bc <strstr+0x10>
 80043cc:	3001      	adds	r0, #1
 80043ce:	7803      	ldrb	r3, [r0, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1ef      	bne.n	80043b4 <strstr+0x8>
 80043d4:	4618      	mov	r0, r3
 80043d6:	e7ec      	b.n	80043b2 <strstr+0x6>

080043d8 <_init>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	bf00      	nop
 80043dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043de:	bc08      	pop	{r3}
 80043e0:	469e      	mov	lr, r3
 80043e2:	4770      	bx	lr

080043e4 <_fini>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	bf00      	nop
 80043e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ea:	bc08      	pop	{r3}
 80043ec:	469e      	mov	lr, r3
 80043ee:	4770      	bx	lr
